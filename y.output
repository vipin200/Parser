Grammar

    0 $accept: start $end

    1 start: st1 ';'

    2 st1: SELECT attr FROM tableList st2
    3    | SELECT DISTINCT attr FROM tableList st2

    4 st2: WHERE expr st3
    5    | st3

    6 st3: GROUP BY st4 st5
    7    | st5

    8 st4: st4 ',' st4
    9    | ID st7
   10    | INT st7

   11 st5: HAVING expr1 st6
   12    | st6

   13 st6: ORDER BY st4
   14    | st8

   15 st7: DESC
   16    | ASC
   17    | /* empty */

   18 st8: LIMIT INT
   19    | LIMIT INT ',' INT
   20    | /* empty */

   21 attr: attrList
   22     | '*'
   23     | COUNT alias

   24 attrList: attrList ',' attrList
   25         | expr1 alias

   26 alias: AS ID
   27      | /* empty */

   28 tableList: tableList ',' tableList
   29          | ID
   30          | '(' st1 ')' alias

   31 expr: expr OR expr
   32     | expr XOR expr
   33     | expr AND expr
   34     | NOT expr
   35     | '(' expr ')'
   36     | bool_prim IS BOOL
   37     | bool_prim IS NOT BOOL
   38     | bool_prim

   39 bool_prim: bool_prim IS NUL
   40          | bool_prim IS NOT NUL
   41          | bool_prim CMP pred
   42          | bool_prim CMP ALL '(' st1 ')'
   43          | bool_prim CMP ANY '(' st1 ')'
   44          | pred

   45 pred: bit_expr pred1
   46     | bit_expr NOT pred1
   47     | bit_expr

   48 pred1: IN '(' st1 ')'
   49      | IN '(' expr_lst ')'
   50      | BETWEEN bit_expr AND pred
   51      | LIKE simple_expr
   52      | REG bit_expr

   53 expr_lst: expr ',' expr_lst
   54         | expr

   55 bit_expr: bit_expr '|' bit_expr
   56         | bit_expr '&' bit_expr
   57         | bit_expr LS bit_expr
   58         | bit_expr RS bit_expr
   59         | bit_expr '+' bit_expr
   60         | bit_expr '-' bit_expr
   61         | bit_expr '*' bit_expr
   62         | bit_expr DIV bit_expr
   63         | bit_expr MOD bit_expr
   64         | bit_expr '^' bit_expr
   65         | simple_expr

   66 simple_expr: '+' simple_expr
   67            | '-' simple_expr
   68            | '~' simple_expr
   69            | '!' simple_expr
   70            | '(' st1 ')'
   71            | EXISTS '(' st1 ')'
   72            | val

   73 val: FLOAT
   74    | NUL
   75    | LITERAL
   76    | BOOL
   77    | ID
   78    | INT

   79 expr1: expr1 OR expr1
   80      | expr1 XOR expr1
   81      | expr1 AND expr1
   82      | NOT expr1
   83      | '(' expr1 ')'
   84      | bool_prim1 IS BOOL
   85      | bool_prim1 IS NOT BOOL
   86      | bool_prim1

   87 bool_prim1: bool_prim1 IS NUL
   88           | bool_prim1 IS NOT NUL
   89           | bool_prim1 CMP pred2
   90           | bool_prim1 CMP ALL '(' st1 ')'
   91           | bool_prim1 CMP ANY '(' st1 ')'
   92           | pred2

   93 pred2: bit_expr1 pred3
   94      | bit_expr1 NOT pred3
   95      | bit_expr1

   96 pred3: IN '(' st1 ')'
   97      | IN '(' expr1_lst ')'
   98      | BETWEEN bit_expr1 AND pred2
   99      | LIKE simple_expr1
  100      | REG bit_expr1

  101 expr1_lst: expr1 ',' expr1_lst
  102          | expr1

  103 bit_expr1: bit_expr1 '|' bit_expr1
  104          | bit_expr1 '&' bit_expr1
  105          | bit_expr1 LS bit_expr1
  106          | bit_expr1 RS bit_expr1
  107          | bit_expr1 '+' bit_expr1
  108          | bit_expr1 '-' bit_expr1
  109          | bit_expr1 '*' bit_expr1
  110          | bit_expr1 DIV bit_expr1
  111          | bit_expr1 MOD bit_expr1
  112          | bit_expr1 '^' bit_expr1
  113          | simple_expr1

  114 simple_expr1: '+' simple_expr1
  115             | '-' simple_expr1
  116             | '~' simple_expr1
  117             | '!' simple_expr1
  118             | '(' st1 ')'
  119             | EXISTS '(' st1 ')'
  120             | FUNC '(' val ')'
  121             | FUNC '(' DISTINCT val ')'
  122             | val


Terminals, with rules where they appear

$end (0) 0
'!' (33) 69 117
'&' (38) 56 104
'(' (40) 30 35 42 43 48 49 70 71 83 90 91 96 97 118 119 120 121
')' (41) 30 35 42 43 48 49 70 71 83 90 91 96 97 118 119 120 121
'*' (42) 22 61 109
'+' (43) 59 66 107 114
',' (44) 8 19 24 28 53 101
'-' (45) 60 67 108 115
';' (59) 1
'^' (94) 64 112
'|' (124) 55 103
'~' (126) 68 116
error (256)
SELECT (258) 2 3
DISTINCT (259) 3 121
AS (260) 26
FUNC (261) 120 121
COUNT (262) 23
FROM (263) 2 3
WHERE (264) 4
GROUP (265) 6
HAVING (266) 11
ORDER (267) 13
BY (268) 6 13
LIMIT (269) 18 19
ASC (270) 16
DESC (271) 15
ID (272) 9 26 29 77
LITERAL (273) 75
OR (274) 31 79
AND (275) 33 50 81 98
XOR (276) 32 80
NOT (277) 34 37 40 46 82 85 88 94
IS (278) 36 37 39 40 84 85 87 88
NUL (279) 39 40 74 87 88
ANY (280) 43 91
ALL (281) 42 90
CMP (282) 41 42 43 89 90 91
IN (283) 48 49 96 97
BETWEEN (284) 50 98
LIKE (285) 51 99
REG (286) 52 100
LS (287) 57 105
RS (288) 58 106
DIV (289) 62 110
MOD (290) 63 111
EXISTS (291) 71 119
BOOL (292) 36 37 76 84 85
INT (293) 10 18 19 78
FLOAT (294) 73
UMINUS (295)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
st1 (55)
    on left: 2 3, on right: 1 30 42 43 48 70 71 90 91 96 118 119
st2 (56)
    on left: 4 5, on right: 2 3
st3 (57)
    on left: 6 7, on right: 4 5
st4 (58)
    on left: 8 9 10, on right: 6 8 13
st5 (59)
    on left: 11 12, on right: 6 7
st6 (60)
    on left: 13 14, on right: 11 12
st7 (61)
    on left: 15 16 17, on right: 9 10
st8 (62)
    on left: 18 19 20, on right: 14
attr (63)
    on left: 21 22 23, on right: 2 3
attrList (64)
    on left: 24 25, on right: 21 24
alias (65)
    on left: 26 27, on right: 23 25 30
tableList (66)
    on left: 28 29 30, on right: 2 3 28
expr (67)
    on left: 31 32 33 34 35 36 37 38, on right: 4 31 32 33 34 35 53
    54
bool_prim (68)
    on left: 39 40 41 42 43 44, on right: 36 37 38 39 40 41 42 43
pred (69)
    on left: 45 46 47, on right: 41 44 50
pred1 (70)
    on left: 48 49 50 51 52, on right: 45 46
expr_lst (71)
    on left: 53 54, on right: 49 53
bit_expr (72)
    on left: 55 56 57 58 59 60 61 62 63 64 65, on right: 45 46 47 50
    52 55 56 57 58 59 60 61 62 63 64
simple_expr (73)
    on left: 66 67 68 69 70 71 72, on right: 51 65 66 67 68 69
val (74)
    on left: 73 74 75 76 77 78, on right: 72 120 121 122
expr1 (75)
    on left: 79 80 81 82 83 84 85 86, on right: 11 25 79 80 81 82 83
    101 102
bool_prim1 (76)
    on left: 87 88 89 90 91 92, on right: 84 85 86 87 88 89 90 91
pred2 (77)
    on left: 93 94 95, on right: 89 92 98
pred3 (78)
    on left: 96 97 98 99 100, on right: 93 94
expr1_lst (79)
    on left: 101 102, on right: 97 101
bit_expr1 (80)
    on left: 103 104 105 106 107 108 109 110 111 112 113, on right:
    93 94 95 98 100 103 104 105 106 107 108 109 110 111 112
simple_expr1 (81)
    on left: 114 115 116 117 118 119 120 121 122, on right: 99 113
    114 115 116 117


state 0

    0 $accept: . start $end

    SELECT  shift, and go to state 1

    start  go to state 2
    st1    go to state 3


state 1

    2 st1: SELECT . attr FROM tableList st2
    3    | SELECT . DISTINCT attr FROM tableList st2

    DISTINCT  shift, and go to state 4
    FUNC      shift, and go to state 5
    COUNT     shift, and go to state 6
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NOT       shift, and go to state 9
    NUL       shift, and go to state 10
    EXISTS    shift, and go to state 11
    BOOL      shift, and go to state 12
    INT       shift, and go to state 13
    FLOAT     shift, and go to state 14
    '+'       shift, and go to state 15
    '-'       shift, and go to state 16
    '*'       shift, and go to state 17
    '('       shift, and go to state 18
    '~'       shift, and go to state 19
    '!'       shift, and go to state 20

    attr          go to state 21
    attrList      go to state 22
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 2

    0 $accept: start . $end

    $end  shift, and go to state 29


state 3

    1 start: st1 . ';'

    ';'  shift, and go to state 30


state 4

    3 st1: SELECT DISTINCT . attr FROM tableList st2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '*'      shift, and go to state 17
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    attr          go to state 31
    attrList      go to state 22
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 5

  120 simple_expr1: FUNC . '(' val ')'
  121             | FUNC . '(' DISTINCT val ')'

    '('  shift, and go to state 32


state 6

   23 attr: COUNT . alias

    AS  shift, and go to state 33

    $default  reduce using rule 27 (alias)

    alias  go to state 34


state 7

   77 val: ID .

    $default  reduce using rule 77 (val)


state 8

   75 val: LITERAL .

    $default  reduce using rule 75 (val)


state 9

   82 expr1: NOT . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 35
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 10

   74 val: NUL .

    $default  reduce using rule 74 (val)


state 11

  119 simple_expr1: EXISTS . '(' st1 ')'

    '('  shift, and go to state 36


state 12

   76 val: BOOL .

    $default  reduce using rule 76 (val)


state 13

   78 val: INT .

    $default  reduce using rule 78 (val)


state 14

   73 val: FLOAT .

    $default  reduce using rule 73 (val)


state 15

  114 simple_expr1: '+' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 38


state 16

  115 simple_expr1: '-' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 39


state 17

   22 attr: '*' .

    $default  reduce using rule 22 (attr)


state 18

   83 expr1: '(' . expr1 ')'
  118 simple_expr1: '(' . st1 ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    st1           go to state 40
    val           go to state 23
    expr1         go to state 41
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 19

  116 simple_expr1: '~' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 42


state 20

  117 simple_expr1: '!' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 43


state 21

    2 st1: SELECT attr . FROM tableList st2

    FROM  shift, and go to state 44


state 22

   21 attr: attrList .
   24 attrList: attrList . ',' attrList

    ','  shift, and go to state 45

    $default  reduce using rule 21 (attr)


state 23

  122 simple_expr1: val .

    $default  reduce using rule 122 (simple_expr1)


state 24

   25 attrList: expr1 . alias
   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1

    AS   shift, and go to state 33
    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48

    $default  reduce using rule 27 (alias)

    alias  go to state 49


state 25

   84 expr1: bool_prim1 . IS BOOL
   85      | bool_prim1 . IS NOT BOOL
   86      | bool_prim1 .
   87 bool_prim1: bool_prim1 . IS NUL
   88           | bool_prim1 . IS NOT NUL
   89           | bool_prim1 . CMP pred2
   90           | bool_prim1 . CMP ALL '(' st1 ')'
   91           | bool_prim1 . CMP ANY '(' st1 ')'

    IS   shift, and go to state 50
    CMP  shift, and go to state 51

    $default  reduce using rule 86 (expr1)


state 26

   92 bool_prim1: pred2 .

    $default  reduce using rule 92 (bool_prim1)


state 27

   93 pred2: bit_expr1 . pred3
   94      | bit_expr1 . NOT pred3
   95      | bit_expr1 .
  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    NOT      shift, and go to state 52
    IN       shift, and go to state 53
    BETWEEN  shift, and go to state 54
    LIKE     shift, and go to state 55
    REG      shift, and go to state 56
    LS       shift, and go to state 57
    RS       shift, and go to state 58
    DIV      shift, and go to state 59
    MOD      shift, and go to state 60
    '|'      shift, and go to state 61
    '&'      shift, and go to state 62
    '+'      shift, and go to state 63
    '-'      shift, and go to state 64
    '*'      shift, and go to state 65
    '^'      shift, and go to state 66

    $default  reduce using rule 95 (pred2)

    pred3  go to state 67


state 28

  113 bit_expr1: simple_expr1 .

    $default  reduce using rule 113 (bit_expr1)


state 29

    0 $accept: start $end .

    $default  accept


state 30

    1 start: st1 ';' .

    $default  reduce using rule 1 (start)


state 31

    3 st1: SELECT DISTINCT attr . FROM tableList st2

    FROM  shift, and go to state 68


state 32

  120 simple_expr1: FUNC '(' . val ')'
  121             | FUNC '(' . DISTINCT val ')'

    DISTINCT  shift, and go to state 69
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NUL       shift, and go to state 10
    BOOL      shift, and go to state 12
    INT       shift, and go to state 13
    FLOAT     shift, and go to state 14

    val  go to state 70


state 33

   26 alias: AS . ID

    ID  shift, and go to state 71


state 34

   23 attr: COUNT alias .

    $default  reduce using rule 23 (attr)


state 35

   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1
   82      | NOT expr1 .

    $default  reduce using rule 82 (expr1)


state 36

  119 simple_expr1: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 72


state 37

  118 simple_expr1: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 40


state 38

  114 simple_expr1: '+' simple_expr1 .

    $default  reduce using rule 114 (simple_expr1)


state 39

  115 simple_expr1: '-' simple_expr1 .

    $default  reduce using rule 115 (simple_expr1)


state 40

  118 simple_expr1: '(' st1 . ')'

    ')'  shift, and go to state 73


state 41

   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1
   83      | '(' expr1 . ')'

    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48
    ')'  shift, and go to state 74


state 42

  116 simple_expr1: '~' simple_expr1 .

    $default  reduce using rule 116 (simple_expr1)


state 43

  117 simple_expr1: '!' simple_expr1 .

    $default  reduce using rule 117 (simple_expr1)


state 44

    2 st1: SELECT attr FROM . tableList st2

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 77


state 45

   24 attrList: attrList ',' . attrList

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    attrList      go to state 78
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 46

   79 expr1: expr1 OR . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 79
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 47

   81 expr1: expr1 AND . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 80
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 48

   80 expr1: expr1 XOR . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 81
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 49

   25 attrList: expr1 alias .

    $default  reduce using rule 25 (attrList)


state 50

   84 expr1: bool_prim1 IS . BOOL
   85      | bool_prim1 IS . NOT BOOL
   87 bool_prim1: bool_prim1 IS . NUL
   88           | bool_prim1 IS . NOT NUL

    NOT   shift, and go to state 82
    NUL   shift, and go to state 83
    BOOL  shift, and go to state 84


state 51

   89 bool_prim1: bool_prim1 CMP . pred2
   90           | bool_prim1 CMP . ALL '(' st1 ')'
   91           | bool_prim1 CMP . ANY '(' st1 ')'

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 85
    ALL      shift, and go to state 86
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    pred2         go to state 87
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 52

   94 pred2: bit_expr1 NOT . pred3

    IN       shift, and go to state 53
    BETWEEN  shift, and go to state 54
    LIKE     shift, and go to state 55
    REG      shift, and go to state 56

    pred3  go to state 88


state 53

   96 pred3: IN . '(' st1 ')'
   97      | IN . '(' expr1_lst ')'

    '('  shift, and go to state 89


state 54

   98 pred3: BETWEEN . bit_expr1 AND pred2

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 90
    simple_expr1  go to state 28


state 55

   99 pred3: LIKE . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 91


state 56

  100 pred3: REG . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 92
    simple_expr1  go to state 28


state 57

  105 bit_expr1: bit_expr1 LS . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 93
    simple_expr1  go to state 28


state 58

  106 bit_expr1: bit_expr1 RS . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 94
    simple_expr1  go to state 28


state 59

  110 bit_expr1: bit_expr1 DIV . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 95
    simple_expr1  go to state 28


state 60

  111 bit_expr1: bit_expr1 MOD . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 96
    simple_expr1  go to state 28


state 61

  103 bit_expr1: bit_expr1 '|' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 97
    simple_expr1  go to state 28


state 62

  104 bit_expr1: bit_expr1 '&' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 98
    simple_expr1  go to state 28


state 63

  107 bit_expr1: bit_expr1 '+' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 99
    simple_expr1  go to state 28


state 64

  108 bit_expr1: bit_expr1 '-' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 100
    simple_expr1  go to state 28


state 65

  109 bit_expr1: bit_expr1 '*' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 101
    simple_expr1  go to state 28


state 66

  112 bit_expr1: bit_expr1 '^' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 102
    simple_expr1  go to state 28


state 67

   93 pred2: bit_expr1 pred3 .

    $default  reduce using rule 93 (pred2)


state 68

    3 st1: SELECT DISTINCT attr FROM . tableList st2

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 103


state 69

  121 simple_expr1: FUNC '(' DISTINCT . val ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14

    val  go to state 104


state 70

  120 simple_expr1: FUNC '(' val . ')'

    ')'  shift, and go to state 105


state 71

   26 alias: AS ID .

    $default  reduce using rule 26 (alias)


state 72

  119 simple_expr1: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 106


state 73

  118 simple_expr1: '(' st1 ')' .

    $default  reduce using rule 118 (simple_expr1)


state 74

   83 expr1: '(' expr1 ')' .

    $default  reduce using rule 83 (expr1)


state 75

   29 tableList: ID .

    $default  reduce using rule 29 (tableList)


state 76

   30 tableList: '(' . st1 ')' alias

    SELECT  shift, and go to state 1

    st1  go to state 107


state 77

    2 st1: SELECT attr FROM tableList . st2
   28 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 108
    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    LIMIT   shift, and go to state 112
    ','     shift, and go to state 113

    $default  reduce using rule 20 (st8)

    st2  go to state 114
    st3  go to state 115
    st5  go to state 116
    st6  go to state 117
    st8  go to state 118


state 78

   24 attrList: attrList . ',' attrList
   24         | attrList ',' attrList .

    $default  reduce using rule 24 (attrList)


state 79

   79 expr1: expr1 . OR expr1
   79      | expr1 OR expr1 .
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1

    AND  shift, and go to state 47
    XOR  shift, and go to state 48

    $default  reduce using rule 79 (expr1)


state 80

   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1
   81      | expr1 AND expr1 .

    $default  reduce using rule 81 (expr1)


state 81

   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   80      | expr1 XOR expr1 .
   81      | expr1 . AND expr1

    AND  shift, and go to state 47

    $default  reduce using rule 80 (expr1)


state 82

   85 expr1: bool_prim1 IS NOT . BOOL
   88 bool_prim1: bool_prim1 IS NOT . NUL

    NUL   shift, and go to state 119
    BOOL  shift, and go to state 120


state 83

   87 bool_prim1: bool_prim1 IS NUL .

    $default  reduce using rule 87 (bool_prim1)


state 84

   84 expr1: bool_prim1 IS BOOL .

    $default  reduce using rule 84 (expr1)


state 85

   91 bool_prim1: bool_prim1 CMP ANY . '(' st1 ')'

    '('  shift, and go to state 121


state 86

   90 bool_prim1: bool_prim1 CMP ALL . '(' st1 ')'

    '('  shift, and go to state 122


state 87

   89 bool_prim1: bool_prim1 CMP pred2 .

    $default  reduce using rule 89 (bool_prim1)


state 88

   94 pred2: bit_expr1 NOT pred3 .

    $default  reduce using rule 94 (pred2)


state 89

   96 pred3: IN '(' . st1 ')'
   97      | IN '(' . expr1_lst ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    st1           go to state 123
    val           go to state 23
    expr1         go to state 124
    bool_prim1    go to state 25
    pred2         go to state 26
    expr1_lst     go to state 125
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 90

   98 pred3: BETWEEN bit_expr1 . AND pred2
  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    AND  shift, and go to state 126
    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '|'  shift, and go to state 61
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66


state 91

   99 pred3: LIKE simple_expr1 .

    $default  reduce using rule 99 (pred3)


state 92

  100 pred3: REG bit_expr1 .
  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '|'  shift, and go to state 61
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 100 (pred3)


state 93

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  105          | bit_expr1 LS bit_expr1 .
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 105 (bit_expr1)


state 94

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  106          | bit_expr1 RS bit_expr1 .
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 106 (bit_expr1)


state 95

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  110          | bit_expr1 DIV bit_expr1 .
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 110 (bit_expr1)


state 96

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  111          | bit_expr1 MOD bit_expr1 .
  112          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 111 (bit_expr1)


state 97

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  103          | bit_expr1 '|' bit_expr1 .
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 103 (bit_expr1)


state 98

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  104          | bit_expr1 '&' bit_expr1 .
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 104 (bit_expr1)


state 99

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  107          | bit_expr1 '+' bit_expr1 .
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 107 (bit_expr1)


state 100

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  108          | bit_expr1 '-' bit_expr1 .
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 108 (bit_expr1)


state 101

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  109          | bit_expr1 '*' bit_expr1 .
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 109 (bit_expr1)


state 102

  103 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 . '^' bit_expr1
  112          | bit_expr1 '^' bit_expr1 .

    $default  reduce using rule 112 (bit_expr1)


state 103

    3 st1: SELECT DISTINCT attr FROM tableList . st2
   28 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 108
    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    LIMIT   shift, and go to state 112
    ','     shift, and go to state 113

    $default  reduce using rule 20 (st8)

    st2  go to state 127
    st3  go to state 115
    st5  go to state 116
    st6  go to state 117
    st8  go to state 118


state 104

  121 simple_expr1: FUNC '(' DISTINCT val . ')'

    ')'  shift, and go to state 128


state 105

  120 simple_expr1: FUNC '(' val ')' .

    $default  reduce using rule 120 (simple_expr1)


state 106

  119 simple_expr1: EXISTS '(' st1 ')' .

    $default  reduce using rule 119 (simple_expr1)


state 107

   30 tableList: '(' st1 . ')' alias

    ')'  shift, and go to state 129


state 108

    4 st2: WHERE . expr st3

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 137
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 109

    6 st3: GROUP . BY st4 st5

    BY  shift, and go to state 143


state 110

   11 st5: HAVING . expr1 st6

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 144
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 111

   13 st6: ORDER . BY st4

    BY  shift, and go to state 145


state 112

   18 st8: LIMIT . INT
   19    | LIMIT . INT ',' INT

    INT  shift, and go to state 146


state 113

   28 tableList: tableList ',' . tableList

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 147


state 114

    2 st1: SELECT attr FROM tableList st2 .

    $default  reduce using rule 2 (st1)


state 115

    5 st2: st3 .

    $default  reduce using rule 5 (st2)


state 116

    7 st3: st5 .

    $default  reduce using rule 7 (st3)


state 117

   12 st5: st6 .

    $default  reduce using rule 12 (st5)


state 118

   14 st6: st8 .

    $default  reduce using rule 14 (st6)


state 119

   88 bool_prim1: bool_prim1 IS NOT NUL .

    $default  reduce using rule 88 (bool_prim1)


state 120

   85 expr1: bool_prim1 IS NOT BOOL .

    $default  reduce using rule 85 (expr1)


state 121

   91 bool_prim1: bool_prim1 CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 148


state 122

   90 bool_prim1: bool_prim1 CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 149


state 123

   96 pred3: IN '(' st1 . ')'

    ')'  shift, and go to state 150


state 124

   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1
  101 expr1_lst: expr1 . ',' expr1_lst
  102          | expr1 .

    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48
    ','  shift, and go to state 151

    $default  reduce using rule 102 (expr1_lst)


state 125

   97 pred3: IN '(' expr1_lst . ')'

    ')'  shift, and go to state 152


state 126

   98 pred3: BETWEEN bit_expr1 AND . pred2

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    pred2         go to state 153
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 127

    3 st1: SELECT DISTINCT attr FROM tableList st2 .

    $default  reduce using rule 3 (st1)


state 128

  121 simple_expr1: FUNC '(' DISTINCT val ')' .

    $default  reduce using rule 121 (simple_expr1)


state 129

   30 tableList: '(' st1 ')' . alias

    AS  shift, and go to state 33

    $default  reduce using rule 27 (alias)

    alias  go to state 154


state 130

   34 expr: NOT . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 155
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 131

   71 simple_expr: EXISTS . '(' st1 ')'

    '('  shift, and go to state 156


state 132

   66 simple_expr: '+' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    simple_expr  go to state 158
    val          go to state 142


state 133

   67 simple_expr: '-' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    simple_expr  go to state 159
    val          go to state 142


state 134

   35 expr: '(' . expr ')'
   70 simple_expr: '(' . st1 ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    st1          go to state 160
    expr         go to state 161
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 135

   68 simple_expr: '~' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    simple_expr  go to state 162
    val          go to state 142


state 136

   69 simple_expr: '!' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    simple_expr  go to state 163
    val          go to state 142


state 137

    4 st2: WHERE expr . st3
   31 expr: expr . OR expr
   32     | expr . XOR expr
   33     | expr . AND expr

    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    LIMIT   shift, and go to state 112
    OR      shift, and go to state 164
    AND     shift, and go to state 165
    XOR     shift, and go to state 166

    $default  reduce using rule 20 (st8)

    st3  go to state 167
    st5  go to state 116
    st6  go to state 117
    st8  go to state 118


state 138

   36 expr: bool_prim . IS BOOL
   37     | bool_prim . IS NOT BOOL
   38     | bool_prim .
   39 bool_prim: bool_prim . IS NUL
   40          | bool_prim . IS NOT NUL
   41          | bool_prim . CMP pred
   42          | bool_prim . CMP ALL '(' st1 ')'
   43          | bool_prim . CMP ANY '(' st1 ')'

    IS   shift, and go to state 168
    CMP  shift, and go to state 169

    $default  reduce using rule 38 (expr)


state 139

   44 bool_prim: pred .

    $default  reduce using rule 44 (bool_prim)


state 140

   45 pred: bit_expr . pred1
   46     | bit_expr . NOT pred1
   47     | bit_expr .
   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    NOT      shift, and go to state 170
    IN       shift, and go to state 171
    BETWEEN  shift, and go to state 172
    LIKE     shift, and go to state 173
    REG      shift, and go to state 174
    LS       shift, and go to state 175
    RS       shift, and go to state 176
    DIV      shift, and go to state 177
    MOD      shift, and go to state 178
    '|'      shift, and go to state 179
    '&'      shift, and go to state 180
    '+'      shift, and go to state 181
    '-'      shift, and go to state 182
    '*'      shift, and go to state 183
    '^'      shift, and go to state 184

    $default  reduce using rule 47 (pred)

    pred1  go to state 185


state 141

   65 bit_expr: simple_expr .

    $default  reduce using rule 65 (bit_expr)


state 142

   72 simple_expr: val .

    $default  reduce using rule 72 (simple_expr)


state 143

    6 st3: GROUP BY . st4 st5

    ID   shift, and go to state 186
    INT  shift, and go to state 187

    st4  go to state 188


state 144

   11 st5: HAVING expr1 . st6
   79 expr1: expr1 . OR expr1
   80      | expr1 . XOR expr1
   81      | expr1 . AND expr1

    ORDER  shift, and go to state 111
    LIMIT  shift, and go to state 112
    OR     shift, and go to state 46
    AND    shift, and go to state 47
    XOR    shift, and go to state 48

    $default  reduce using rule 20 (st8)

    st6  go to state 189
    st8  go to state 118


state 145

   13 st6: ORDER BY . st4

    ID   shift, and go to state 186
    INT  shift, and go to state 187

    st4  go to state 190


state 146

   18 st8: LIMIT INT .
   19    | LIMIT INT . ',' INT

    ','  shift, and go to state 191

    $default  reduce using rule 18 (st8)


state 147

   28 tableList: tableList . ',' tableList
   28          | tableList ',' tableList .

    $default  reduce using rule 28 (tableList)


state 148

   91 bool_prim1: bool_prim1 CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 192


state 149

   90 bool_prim1: bool_prim1 CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 193


state 150

   96 pred3: IN '(' st1 ')' .

    $default  reduce using rule 96 (pred3)


state 151

  101 expr1_lst: expr1 ',' . expr1_lst

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 124
    bool_prim1    go to state 25
    pred2         go to state 26
    expr1_lst     go to state 194
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 152

   97 pred3: IN '(' expr1_lst ')' .

    $default  reduce using rule 97 (pred3)


state 153

   98 pred3: BETWEEN bit_expr1 AND pred2 .

    $default  reduce using rule 98 (pred3)


state 154

   30 tableList: '(' st1 ')' alias .

    $default  reduce using rule 30 (tableList)


state 155

   31 expr: expr . OR expr
   32     | expr . XOR expr
   33     | expr . AND expr
   34     | NOT expr .

    $default  reduce using rule 34 (expr)


state 156

   71 simple_expr: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 195


state 157

   70 simple_expr: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 160


state 158

   66 simple_expr: '+' simple_expr .

    $default  reduce using rule 66 (simple_expr)


state 159

   67 simple_expr: '-' simple_expr .

    $default  reduce using rule 67 (simple_expr)


state 160

   70 simple_expr: '(' st1 . ')'

    ')'  shift, and go to state 196


state 161

   31 expr: expr . OR expr
   32     | expr . XOR expr
   33     | expr . AND expr
   35     | '(' expr . ')'

    OR   shift, and go to state 164
    AND  shift, and go to state 165
    XOR  shift, and go to state 166
    ')'  shift, and go to state 197


state 162

   68 simple_expr: '~' simple_expr .

    $default  reduce using rule 68 (simple_expr)


state 163

   69 simple_expr: '!' simple_expr .

    $default  reduce using rule 69 (simple_expr)


state 164

   31 expr: expr OR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 198
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 165

   33 expr: expr AND . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 199
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 166

   32 expr: expr XOR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 200
    bool_prim    go to state 138
    pred         go to state 139
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 167

    4 st2: WHERE expr st3 .

    $default  reduce using rule 4 (st2)


state 168

   36 expr: bool_prim IS . BOOL
   37     | bool_prim IS . NOT BOOL
   39 bool_prim: bool_prim IS . NUL
   40          | bool_prim IS . NOT NUL

    NOT   shift, and go to state 201
    NUL   shift, and go to state 202
    BOOL  shift, and go to state 203


state 169

   41 bool_prim: bool_prim CMP . pred
   42          | bool_prim CMP . ALL '(' st1 ')'
   43          | bool_prim CMP . ANY '(' st1 ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 204
    ALL      shift, and go to state 205
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    pred         go to state 206
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 170

   46 pred: bit_expr NOT . pred1

    IN       shift, and go to state 171
    BETWEEN  shift, and go to state 172
    LIKE     shift, and go to state 173
    REG      shift, and go to state 174

    pred1  go to state 207


state 171

   48 pred1: IN . '(' st1 ')'
   49      | IN . '(' expr_lst ')'

    '('  shift, and go to state 208


state 172

   50 pred1: BETWEEN . bit_expr AND pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 209
    simple_expr  go to state 141
    val          go to state 142


state 173

   51 pred1: LIKE . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    simple_expr  go to state 210
    val          go to state 142


state 174

   52 pred1: REG . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 211
    simple_expr  go to state 141
    val          go to state 142


state 175

   57 bit_expr: bit_expr LS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 212
    simple_expr  go to state 141
    val          go to state 142


state 176

   58 bit_expr: bit_expr RS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 213
    simple_expr  go to state 141
    val          go to state 142


state 177

   62 bit_expr: bit_expr DIV . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 214
    simple_expr  go to state 141
    val          go to state 142


state 178

   63 bit_expr: bit_expr MOD . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 215
    simple_expr  go to state 141
    val          go to state 142


state 179

   55 bit_expr: bit_expr '|' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 216
    simple_expr  go to state 141
    val          go to state 142


state 180

   56 bit_expr: bit_expr '&' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 217
    simple_expr  go to state 141
    val          go to state 142


state 181

   59 bit_expr: bit_expr '+' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 218
    simple_expr  go to state 141
    val          go to state 142


state 182

   60 bit_expr: bit_expr '-' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 219
    simple_expr  go to state 141
    val          go to state 142


state 183

   61 bit_expr: bit_expr '*' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 220
    simple_expr  go to state 141
    val          go to state 142


state 184

   64 bit_expr: bit_expr '^' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    bit_expr     go to state 221
    simple_expr  go to state 141
    val          go to state 142


state 185

   45 pred: bit_expr pred1 .

    $default  reduce using rule 45 (pred)


state 186

    9 st4: ID . st7

    ASC   shift, and go to state 222
    DESC  shift, and go to state 223

    $default  reduce using rule 17 (st7)

    st7  go to state 224


state 187

   10 st4: INT . st7

    ASC   shift, and go to state 222
    DESC  shift, and go to state 223

    $default  reduce using rule 17 (st7)

    st7  go to state 225


state 188

    6 st3: GROUP BY st4 . st5
    8 st4: st4 . ',' st4

    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    LIMIT   shift, and go to state 112
    ','     shift, and go to state 226

    $default  reduce using rule 20 (st8)

    st5  go to state 227
    st6  go to state 117
    st8  go to state 118


state 189

   11 st5: HAVING expr1 st6 .

    $default  reduce using rule 11 (st5)


state 190

    8 st4: st4 . ',' st4
   13 st6: ORDER BY st4 .

    ','  shift, and go to state 226

    $default  reduce using rule 13 (st6)


state 191

   19 st8: LIMIT INT ',' . INT

    INT  shift, and go to state 228


state 192

   91 bool_prim1: bool_prim1 CMP ANY '(' st1 ')' .

    $default  reduce using rule 91 (bool_prim1)


state 193

   90 bool_prim1: bool_prim1 CMP ALL '(' st1 ')' .

    $default  reduce using rule 90 (bool_prim1)


state 194

  101 expr1_lst: expr1 ',' expr1_lst .

    $default  reduce using rule 101 (expr1_lst)


state 195

   71 simple_expr: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 229


state 196

   70 simple_expr: '(' st1 ')' .

    $default  reduce using rule 70 (simple_expr)


state 197

   35 expr: '(' expr ')' .

    $default  reduce using rule 35 (expr)


state 198

   31 expr: expr . OR expr
   31     | expr OR expr .
   32     | expr . XOR expr
   33     | expr . AND expr

    AND  shift, and go to state 165
    XOR  shift, and go to state 166

    $default  reduce using rule 31 (expr)


state 199

   31 expr: expr . OR expr
   32     | expr . XOR expr
   33     | expr . AND expr
   33     | expr AND expr .

    $default  reduce using rule 33 (expr)


state 200

   31 expr: expr . OR expr
   32     | expr . XOR expr
   32     | expr XOR expr .
   33     | expr . AND expr

    AND  shift, and go to state 165

    $default  reduce using rule 32 (expr)


state 201

   37 expr: bool_prim IS NOT . BOOL
   40 bool_prim: bool_prim IS NOT . NUL

    NUL   shift, and go to state 230
    BOOL  shift, and go to state 231


state 202

   39 bool_prim: bool_prim IS NUL .

    $default  reduce using rule 39 (bool_prim)


state 203

   36 expr: bool_prim IS BOOL .

    $default  reduce using rule 36 (expr)


state 204

   43 bool_prim: bool_prim CMP ANY . '(' st1 ')'

    '('  shift, and go to state 232


state 205

   42 bool_prim: bool_prim CMP ALL . '(' st1 ')'

    '('  shift, and go to state 233


state 206

   41 bool_prim: bool_prim CMP pred .

    $default  reduce using rule 41 (bool_prim)


state 207

   46 pred: bit_expr NOT pred1 .

    $default  reduce using rule 46 (pred)


state 208

   48 pred1: IN '(' . st1 ')'
   49      | IN '(' . expr_lst ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    st1          go to state 234
    expr         go to state 235
    bool_prim    go to state 138
    pred         go to state 139
    expr_lst     go to state 236
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 209

   50 pred1: BETWEEN bit_expr . AND pred
   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    AND  shift, and go to state 237
    LS   shift, and go to state 175
    RS   shift, and go to state 176
    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '|'  shift, and go to state 179
    '&'  shift, and go to state 180
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184


state 210

   51 pred1: LIKE simple_expr .

    $default  reduce using rule 51 (pred1)


state 211

   52 pred1: REG bit_expr .
   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    LS   shift, and go to state 175
    RS   shift, and go to state 176
    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '|'  shift, and go to state 179
    '&'  shift, and go to state 180
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 52 (pred1)


state 212

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   57         | bit_expr LS bit_expr .
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 57 (bit_expr)


state 213

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   58         | bit_expr RS bit_expr .
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 58 (bit_expr)


state 214

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   62         | bit_expr DIV bit_expr .
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 184

    $default  reduce using rule 62 (bit_expr)


state 215

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   63         | bit_expr MOD bit_expr .
   64         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 184

    $default  reduce using rule 63 (bit_expr)


state 216

   55 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr '|' bit_expr .
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    LS   shift, and go to state 175
    RS   shift, and go to state 176
    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '&'  shift, and go to state 180
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 55 (bit_expr)


state 217

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   56         | bit_expr '&' bit_expr .
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    LS   shift, and go to state 175
    RS   shift, and go to state 176
    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '+'  shift, and go to state 181
    '-'  shift, and go to state 182
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 56 (bit_expr)


state 218

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   59         | bit_expr '+' bit_expr .
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 59 (bit_expr)


state 219

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   60         | bit_expr '-' bit_expr .
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 177
    MOD  shift, and go to state 178
    '*'  shift, and go to state 183
    '^'  shift, and go to state 184

    $default  reduce using rule 60 (bit_expr)


state 220

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   61         | bit_expr '*' bit_expr .
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 184

    $default  reduce using rule 61 (bit_expr)


state 221

   55 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr . '&' bit_expr
   57         | bit_expr . LS bit_expr
   58         | bit_expr . RS bit_expr
   59         | bit_expr . '+' bit_expr
   60         | bit_expr . '-' bit_expr
   61         | bit_expr . '*' bit_expr
   62         | bit_expr . DIV bit_expr
   63         | bit_expr . MOD bit_expr
   64         | bit_expr . '^' bit_expr
   64         | bit_expr '^' bit_expr .

    $default  reduce using rule 64 (bit_expr)


state 222

   16 st7: ASC .

    $default  reduce using rule 16 (st7)


state 223

   15 st7: DESC .

    $default  reduce using rule 15 (st7)


state 224

    9 st4: ID st7 .

    $default  reduce using rule 9 (st4)


state 225

   10 st4: INT st7 .

    $default  reduce using rule 10 (st4)


state 226

    8 st4: st4 ',' . st4

    ID   shift, and go to state 186
    INT  shift, and go to state 187

    st4  go to state 238


state 227

    6 st3: GROUP BY st4 st5 .

    $default  reduce using rule 6 (st3)


state 228

   19 st8: LIMIT INT ',' INT .

    $default  reduce using rule 19 (st8)


state 229

   71 simple_expr: EXISTS '(' st1 ')' .

    $default  reduce using rule 71 (simple_expr)


state 230

   40 bool_prim: bool_prim IS NOT NUL .

    $default  reduce using rule 40 (bool_prim)


state 231

   37 expr: bool_prim IS NOT BOOL .

    $default  reduce using rule 37 (expr)


state 232

   43 bool_prim: bool_prim CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 239


state 233

   42 bool_prim: bool_prim CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 240


state 234

   48 pred1: IN '(' st1 . ')'

    ')'  shift, and go to state 241


state 235

   31 expr: expr . OR expr
   32     | expr . XOR expr
   33     | expr . AND expr
   53 expr_lst: expr . ',' expr_lst
   54         | expr .

    OR   shift, and go to state 164
    AND  shift, and go to state 165
    XOR  shift, and go to state 166
    ','  shift, and go to state 242

    $default  reduce using rule 54 (expr_lst)


state 236

   49 pred1: IN '(' expr_lst . ')'

    ')'  shift, and go to state 243


state 237

   50 pred1: BETWEEN bit_expr AND . pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 157
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    pred         go to state 244
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 238

    8 st4: st4 . ',' st4
    8    | st4 ',' st4 .

    $default  reduce using rule 8 (st4)


state 239

   43 bool_prim: bool_prim CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 245


state 240

   42 bool_prim: bool_prim CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 246


state 241

   48 pred1: IN '(' st1 ')' .

    $default  reduce using rule 48 (pred1)


state 242

   53 expr_lst: expr ',' . expr_lst

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 130
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 131
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 132
    '-'      shift, and go to state 133
    '('      shift, and go to state 134
    '~'      shift, and go to state 135
    '!'      shift, and go to state 136

    expr         go to state 235
    bool_prim    go to state 138
    pred         go to state 139
    expr_lst     go to state 247
    bit_expr     go to state 140
    simple_expr  go to state 141
    val          go to state 142


state 243

   49 pred1: IN '(' expr_lst ')' .

    $default  reduce using rule 49 (pred1)


state 244

   50 pred1: BETWEEN bit_expr AND pred .

    $default  reduce using rule 50 (pred1)


state 245

   43 bool_prim: bool_prim CMP ANY '(' st1 ')' .

    $default  reduce using rule 43 (bool_prim)


state 246

   42 bool_prim: bool_prim CMP ALL '(' st1 ')' .

    $default  reduce using rule 42 (bool_prim)


state 247

   53 expr_lst: expr ',' expr_lst .

    $default  reduce using rule 53 (expr_lst)
