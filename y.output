Terminals unused in grammar

   LIMIT


Grammar

    0 $accept: start $end

    1 start: st1 ';'

    2 st1: SELECT attr FROM tableList st2
    3    | SELECT DISTINCT attr FROM tableList st2

    4 st2: WHERE expr st3
    5    | st3

    6 st3: GROUP BY st4 st5
    7    | st5

    8 st4: st4 ',' st4
    9    | ID st7
   10    | INT st7

   11 st5: HAVING expr st6
   12    | st6

   13 st6: ORDER BY st4
   14    | /* empty */

   15 st7: DESC
   16    | ASC
   17    | /* empty */

   18 attr: attrList
   19     | '*'
   20     | COUNT alias

   21 attrList: attrList ',' attrList
   22         | FUNC '(' val ')' alias
   23         | FUNC '(' DISTINCT val ')' alias
   24         | val alias

   25 alias: AS ID
   26      | /* empty */

   27 tableList: tableList ',' tableList
   28          | ID
   29          | '(' st1 ')' alias

   30 expr: expr OR expr
   31     | expr XOR expr
   32     | expr AND expr
   33     | NOT expr
   34     | '(' expr ')'
   35     | bool_prim IS BOOL
   36     | bool_prim IS NOT BOOL
   37     | bool_prim

   38 bool_prim: bool_prim IS NUL
   39          | bool_prim IS NOT NUL
   40          | bool_prim CMP pred
   41          | bool_prim CMP ALL '(' st1 ')'
   42          | bool_prim CMP ANY '(' st1 ')'
   43          | pred

   44 pred: bit_expr pred1
   45     | bit_expr NOT pred1
   46     | bit_expr

   47 pred1: IN '(' st1 ')'
   48      | IN '(' expr_lst ')'
   49      | BETWEEN bit_expr AND pred
   50      | LIKE simple_expr
   51      | REG bit_expr

   52 expr_lst: expr ',' expr_lst
   53         | expr

   54 bit_expr: bit_expr '|' bit_expr
   55         | bit_expr '&' bit_expr
   56         | bit_expr LS bit_expr
   57         | bit_expr RS bit_expr
   58         | bit_expr '+' bit_expr
   59         | bit_expr '-' bit_expr
   60         | bit_expr '*' bit_expr
   61         | bit_expr DIV bit_expr
   62         | bit_expr MOD bit_expr
   63         | bit_expr '^' bit_expr
   64         | simple_expr

   65 simple_expr: '+' simple_expr
   66            | '-' simple_expr
   67            | '~' simple_expr
   68            | '!' simple_expr
   69            | '(' st1 ')'
   70            | EXISTS '(' st1 ')'
   71            | val

   72 val: FLOAT
   73    | NUL
   74    | LITERAL
   75    | BOOL
   76    | ID
   77    | INT


Terminals, with rules where they appear

$end (0) 0
'!' (33) 68
'&' (38) 55
'(' (40) 22 23 29 34 41 42 47 48 69 70
')' (41) 22 23 29 34 41 42 47 48 69 70
'*' (42) 19 60
'+' (43) 58 65
',' (44) 8 21 27 52
'-' (45) 59 66
';' (59) 1
'^' (94) 63
'|' (124) 54
'~' (126) 67
error (256)
SELECT (258) 2 3
DISTINCT (259) 3 23
AS (260) 25
FUNC (261) 22 23
COUNT (262) 20
FROM (263) 2 3
WHERE (264) 4
GROUP (265) 6
HAVING (266) 11
ORDER (267) 13
BY (268) 6 13
LIMIT (269)
ASC (270) 16
DESC (271) 15
ID (272) 9 25 28 76
LITERAL (273) 74
OR (274) 30
AND (275) 32 49
XOR (276) 31
NOT (277) 33 36 39 45
IS (278) 35 36 38 39
NUL (279) 38 39 73
ANY (280) 42
ALL (281) 41
CMP (282) 40 41 42
IN (283) 47 48
BETWEEN (284) 49
LIKE (285) 50
REG (286) 51
LS (287) 56
RS (288) 57
DIV (289) 61
MOD (290) 62
EXISTS (291) 70
BOOL (292) 35 36 75
INT (293) 10 77
FLOAT (294) 72
UMINUS (295)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
st1 (55)
    on left: 2 3, on right: 1 29 41 42 47 69 70
st2 (56)
    on left: 4 5, on right: 2 3
st3 (57)
    on left: 6 7, on right: 4 5
st4 (58)
    on left: 8 9 10, on right: 6 8 13
st5 (59)
    on left: 11 12, on right: 6 7
st6 (60)
    on left: 13 14, on right: 11 12
st7 (61)
    on left: 15 16 17, on right: 9 10
attr (62)
    on left: 18 19 20, on right: 2 3
attrList (63)
    on left: 21 22 23 24, on right: 18 21
alias (64)
    on left: 25 26, on right: 20 22 23 24 29
tableList (65)
    on left: 27 28 29, on right: 2 3 27
expr (66)
    on left: 30 31 32 33 34 35 36 37, on right: 4 11 30 31 32 33 34
    52 53
bool_prim (67)
    on left: 38 39 40 41 42 43, on right: 35 36 37 38 39 40 41 42
pred (68)
    on left: 44 45 46, on right: 40 43 49
pred1 (69)
    on left: 47 48 49 50 51, on right: 44 45
expr_lst (70)
    on left: 52 53, on right: 48 52
bit_expr (71)
    on left: 54 55 56 57 58 59 60 61 62 63 64, on right: 44 45 46 49
    51 54 55 56 57 58 59 60 61 62 63
simple_expr (72)
    on left: 65 66 67 68 69 70 71, on right: 50 64 65 66 67 68
val (73)
    on left: 72 73 74 75 76 77, on right: 22 23 24 71


state 0

    0 $accept: . start $end

    SELECT  shift, and go to state 1

    start  go to state 2
    st1    go to state 3


state 1

    2 st1: SELECT . attr FROM tableList st2
    3    | SELECT . DISTINCT attr FROM tableList st2

    DISTINCT  shift, and go to state 4
    FUNC      shift, and go to state 5
    COUNT     shift, and go to state 6
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NUL       shift, and go to state 9
    BOOL      shift, and go to state 10
    INT       shift, and go to state 11
    FLOAT     shift, and go to state 12
    '*'       shift, and go to state 13

    attr      go to state 14
    attrList  go to state 15
    val       go to state 16


state 2

    0 $accept: start . $end

    $end  shift, and go to state 17


state 3

    1 start: st1 . ';'

    ';'  shift, and go to state 18


state 4

    3 st1: SELECT DISTINCT . attr FROM tableList st2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '*'      shift, and go to state 13

    attr      go to state 19
    attrList  go to state 15
    val       go to state 16


state 5

   22 attrList: FUNC . '(' val ')' alias
   23         | FUNC . '(' DISTINCT val ')' alias

    '('  shift, and go to state 20


state 6

   20 attr: COUNT . alias

    AS  shift, and go to state 21

    $default  reduce using rule 26 (alias)

    alias  go to state 22


state 7

   76 val: ID .

    $default  reduce using rule 76 (val)


state 8

   74 val: LITERAL .

    $default  reduce using rule 74 (val)


state 9

   73 val: NUL .

    $default  reduce using rule 73 (val)


state 10

   75 val: BOOL .

    $default  reduce using rule 75 (val)


state 11

   77 val: INT .

    $default  reduce using rule 77 (val)


state 12

   72 val: FLOAT .

    $default  reduce using rule 72 (val)


state 13

   19 attr: '*' .

    $default  reduce using rule 19 (attr)


state 14

    2 st1: SELECT attr . FROM tableList st2

    FROM  shift, and go to state 23


state 15

   18 attr: attrList .
   21 attrList: attrList . ',' attrList

    ','  shift, and go to state 24

    $default  reduce using rule 18 (attr)


state 16

   24 attrList: val . alias

    AS  shift, and go to state 21

    $default  reduce using rule 26 (alias)

    alias  go to state 25


state 17

    0 $accept: start $end .

    $default  accept


state 18

    1 start: st1 ';' .

    $default  reduce using rule 1 (start)


state 19

    3 st1: SELECT DISTINCT attr . FROM tableList st2

    FROM  shift, and go to state 26


state 20

   22 attrList: FUNC '(' . val ')' alias
   23         | FUNC '(' . DISTINCT val ')' alias

    DISTINCT  shift, and go to state 27
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NUL       shift, and go to state 9
    BOOL      shift, and go to state 10
    INT       shift, and go to state 11
    FLOAT     shift, and go to state 12

    val  go to state 28


state 21

   25 alias: AS . ID

    ID  shift, and go to state 29


state 22

   20 attr: COUNT alias .

    $default  reduce using rule 20 (attr)


state 23

    2 st1: SELECT attr FROM . tableList st2

    ID   shift, and go to state 30
    '('  shift, and go to state 31

    tableList  go to state 32


state 24

   21 attrList: attrList ',' . attrList

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12

    attrList  go to state 33
    val       go to state 16


state 25

   24 attrList: val alias .

    $default  reduce using rule 24 (attrList)


state 26

    3 st1: SELECT DISTINCT attr FROM . tableList st2

    ID   shift, and go to state 30
    '('  shift, and go to state 31

    tableList  go to state 34


state 27

   23 attrList: FUNC '(' DISTINCT . val ')' alias

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12

    val  go to state 35


state 28

   22 attrList: FUNC '(' val . ')' alias

    ')'  shift, and go to state 36


state 29

   25 alias: AS ID .

    $default  reduce using rule 25 (alias)


state 30

   28 tableList: ID .

    $default  reduce using rule 28 (tableList)


state 31

   29 tableList: '(' . st1 ')' alias

    SELECT  shift, and go to state 1

    st1  go to state 37


state 32

    2 st1: SELECT attr FROM tableList . st2
   27 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 38
    GROUP   shift, and go to state 39
    HAVING  shift, and go to state 40
    ORDER   shift, and go to state 41
    ','     shift, and go to state 42

    $default  reduce using rule 14 (st6)

    st2  go to state 43
    st3  go to state 44
    st5  go to state 45
    st6  go to state 46


state 33

   21 attrList: attrList . ',' attrList
   21         | attrList ',' attrList .

    $default  reduce using rule 21 (attrList)


state 34

    3 st1: SELECT DISTINCT attr FROM tableList . st2
   27 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 38
    GROUP   shift, and go to state 39
    HAVING  shift, and go to state 40
    ORDER   shift, and go to state 41
    ','     shift, and go to state 42

    $default  reduce using rule 14 (st6)

    st2  go to state 47
    st3  go to state 44
    st5  go to state 45
    st6  go to state 46


state 35

   23 attrList: FUNC '(' DISTINCT val . ')' alias

    ')'  shift, and go to state 48


state 36

   22 attrList: FUNC '(' val ')' . alias

    AS  shift, and go to state 21

    $default  reduce using rule 26 (alias)

    alias  go to state 49


state 37

   29 tableList: '(' st1 . ')' alias

    ')'  shift, and go to state 50


state 38

    4 st2: WHERE . expr st3

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 58
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 39

    6 st3: GROUP . BY st4 st5

    BY  shift, and go to state 64


state 40

   11 st5: HAVING . expr st6

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 65
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 41

   13 st6: ORDER . BY st4

    BY  shift, and go to state 66


state 42

   27 tableList: tableList ',' . tableList

    ID   shift, and go to state 30
    '('  shift, and go to state 31

    tableList  go to state 67


state 43

    2 st1: SELECT attr FROM tableList st2 .

    $default  reduce using rule 2 (st1)


state 44

    5 st2: st3 .

    $default  reduce using rule 5 (st2)


state 45

    7 st3: st5 .

    $default  reduce using rule 7 (st3)


state 46

   12 st5: st6 .

    $default  reduce using rule 12 (st5)


state 47

    3 st1: SELECT DISTINCT attr FROM tableList st2 .

    $default  reduce using rule 3 (st1)


state 48

   23 attrList: FUNC '(' DISTINCT val ')' . alias

    AS  shift, and go to state 21

    $default  reduce using rule 26 (alias)

    alias  go to state 68


state 49

   22 attrList: FUNC '(' val ')' alias .

    $default  reduce using rule 22 (attrList)


state 50

   29 tableList: '(' st1 ')' . alias

    AS  shift, and go to state 21

    $default  reduce using rule 26 (alias)

    alias  go to state 69


state 51

   33 expr: NOT . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 70
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 52

   70 simple_expr: EXISTS . '(' st1 ')'

    '('  shift, and go to state 71


state 53

   65 simple_expr: '+' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    simple_expr  go to state 73
    val          go to state 63


state 54

   66 simple_expr: '-' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    simple_expr  go to state 74
    val          go to state 63


state 55

   34 expr: '(' . expr ')'
   69 simple_expr: '(' . st1 ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    st1          go to state 75
    expr         go to state 76
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 56

   67 simple_expr: '~' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    simple_expr  go to state 77
    val          go to state 63


state 57

   68 simple_expr: '!' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    simple_expr  go to state 78
    val          go to state 63


state 58

    4 st2: WHERE expr . st3
   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr

    GROUP   shift, and go to state 39
    HAVING  shift, and go to state 40
    ORDER   shift, and go to state 41
    OR      shift, and go to state 79
    AND     shift, and go to state 80
    XOR     shift, and go to state 81

    $default  reduce using rule 14 (st6)

    st3  go to state 82
    st5  go to state 45
    st6  go to state 46


state 59

   35 expr: bool_prim . IS BOOL
   36     | bool_prim . IS NOT BOOL
   37     | bool_prim .
   38 bool_prim: bool_prim . IS NUL
   39          | bool_prim . IS NOT NUL
   40          | bool_prim . CMP pred
   41          | bool_prim . CMP ALL '(' st1 ')'
   42          | bool_prim . CMP ANY '(' st1 ')'

    IS   shift, and go to state 83
    CMP  shift, and go to state 84

    $default  reduce using rule 37 (expr)


state 60

   43 bool_prim: pred .

    $default  reduce using rule 43 (bool_prim)


state 61

   44 pred: bit_expr . pred1
   45     | bit_expr . NOT pred1
   46     | bit_expr .
   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    NOT      shift, and go to state 85
    IN       shift, and go to state 86
    BETWEEN  shift, and go to state 87
    LIKE     shift, and go to state 88
    REG      shift, and go to state 89
    LS       shift, and go to state 90
    RS       shift, and go to state 91
    DIV      shift, and go to state 92
    MOD      shift, and go to state 93
    '|'      shift, and go to state 94
    '&'      shift, and go to state 95
    '+'      shift, and go to state 96
    '-'      shift, and go to state 97
    '*'      shift, and go to state 98
    '^'      shift, and go to state 99

    $default  reduce using rule 46 (pred)

    pred1  go to state 100


state 62

   64 bit_expr: simple_expr .

    $default  reduce using rule 64 (bit_expr)


state 63

   71 simple_expr: val .

    $default  reduce using rule 71 (simple_expr)


state 64

    6 st3: GROUP BY . st4 st5

    ID   shift, and go to state 101
    INT  shift, and go to state 102

    st4  go to state 103


state 65

   11 st5: HAVING expr . st6
   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr

    ORDER  shift, and go to state 41
    OR     shift, and go to state 79
    AND    shift, and go to state 80
    XOR    shift, and go to state 81

    $default  reduce using rule 14 (st6)

    st6  go to state 104


state 66

   13 st6: ORDER BY . st4

    ID   shift, and go to state 101
    INT  shift, and go to state 102

    st4  go to state 105


state 67

   27 tableList: tableList . ',' tableList
   27          | tableList ',' tableList .

    $default  reduce using rule 27 (tableList)


state 68

   23 attrList: FUNC '(' DISTINCT val ')' alias .

    $default  reduce using rule 23 (attrList)


state 69

   29 tableList: '(' st1 ')' alias .

    $default  reduce using rule 29 (tableList)


state 70

   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr
   33     | NOT expr .

    $default  reduce using rule 33 (expr)


state 71

   70 simple_expr: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 106


state 72

   69 simple_expr: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 75


state 73

   65 simple_expr: '+' simple_expr .

    $default  reduce using rule 65 (simple_expr)


state 74

   66 simple_expr: '-' simple_expr .

    $default  reduce using rule 66 (simple_expr)


state 75

   69 simple_expr: '(' st1 . ')'

    ')'  shift, and go to state 107


state 76

   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr
   34     | '(' expr . ')'

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    XOR  shift, and go to state 81
    ')'  shift, and go to state 108


state 77

   67 simple_expr: '~' simple_expr .

    $default  reduce using rule 67 (simple_expr)


state 78

   68 simple_expr: '!' simple_expr .

    $default  reduce using rule 68 (simple_expr)


state 79

   30 expr: expr OR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 109
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 80

   32 expr: expr AND . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 110
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 81

   31 expr: expr XOR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 111
    bool_prim    go to state 59
    pred         go to state 60
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 82

    4 st2: WHERE expr st3 .

    $default  reduce using rule 4 (st2)


state 83

   35 expr: bool_prim IS . BOOL
   36     | bool_prim IS . NOT BOOL
   38 bool_prim: bool_prim IS . NUL
   39          | bool_prim IS . NOT NUL

    NOT   shift, and go to state 112
    NUL   shift, and go to state 113
    BOOL  shift, and go to state 114


state 84

   40 bool_prim: bool_prim CMP . pred
   41          | bool_prim CMP . ALL '(' st1 ')'
   42          | bool_prim CMP . ANY '(' st1 ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    ANY      shift, and go to state 115
    ALL      shift, and go to state 116
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    pred         go to state 117
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 85

   45 pred: bit_expr NOT . pred1

    IN       shift, and go to state 86
    BETWEEN  shift, and go to state 87
    LIKE     shift, and go to state 88
    REG      shift, and go to state 89

    pred1  go to state 118


state 86

   47 pred1: IN . '(' st1 ')'
   48      | IN . '(' expr_lst ')'

    '('  shift, and go to state 119


state 87

   49 pred1: BETWEEN . bit_expr AND pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 120
    simple_expr  go to state 62
    val          go to state 63


state 88

   50 pred1: LIKE . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    simple_expr  go to state 121
    val          go to state 63


state 89

   51 pred1: REG . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 122
    simple_expr  go to state 62
    val          go to state 63


state 90

   56 bit_expr: bit_expr LS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 123
    simple_expr  go to state 62
    val          go to state 63


state 91

   57 bit_expr: bit_expr RS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 124
    simple_expr  go to state 62
    val          go to state 63


state 92

   61 bit_expr: bit_expr DIV . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 125
    simple_expr  go to state 62
    val          go to state 63


state 93

   62 bit_expr: bit_expr MOD . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 126
    simple_expr  go to state 62
    val          go to state 63


state 94

   54 bit_expr: bit_expr '|' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 127
    simple_expr  go to state 62
    val          go to state 63


state 95

   55 bit_expr: bit_expr '&' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 128
    simple_expr  go to state 62
    val          go to state 63


state 96

   58 bit_expr: bit_expr '+' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 129
    simple_expr  go to state 62
    val          go to state 63


state 97

   59 bit_expr: bit_expr '-' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 130
    simple_expr  go to state 62
    val          go to state 63


state 98

   60 bit_expr: bit_expr '*' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 131
    simple_expr  go to state 62
    val          go to state 63


state 99

   63 bit_expr: bit_expr '^' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    bit_expr     go to state 132
    simple_expr  go to state 62
    val          go to state 63


state 100

   44 pred: bit_expr pred1 .

    $default  reduce using rule 44 (pred)


state 101

    9 st4: ID . st7

    ASC   shift, and go to state 133
    DESC  shift, and go to state 134

    $default  reduce using rule 17 (st7)

    st7  go to state 135


state 102

   10 st4: INT . st7

    ASC   shift, and go to state 133
    DESC  shift, and go to state 134

    $default  reduce using rule 17 (st7)

    st7  go to state 136


state 103

    6 st3: GROUP BY st4 . st5
    8 st4: st4 . ',' st4

    HAVING  shift, and go to state 40
    ORDER   shift, and go to state 41
    ','     shift, and go to state 137

    $default  reduce using rule 14 (st6)

    st5  go to state 138
    st6  go to state 46


state 104

   11 st5: HAVING expr st6 .

    $default  reduce using rule 11 (st5)


state 105

    8 st4: st4 . ',' st4
   13 st6: ORDER BY st4 .

    ','  shift, and go to state 137

    $default  reduce using rule 13 (st6)


state 106

   70 simple_expr: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 139


state 107

   69 simple_expr: '(' st1 ')' .

    $default  reduce using rule 69 (simple_expr)


state 108

   34 expr: '(' expr ')' .

    $default  reduce using rule 34 (expr)


state 109

   30 expr: expr . OR expr
   30     | expr OR expr .
   31     | expr . XOR expr
   32     | expr . AND expr

    AND  shift, and go to state 80
    XOR  shift, and go to state 81

    $default  reduce using rule 30 (expr)


state 110

   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr
   32     | expr AND expr .

    $default  reduce using rule 32 (expr)


state 111

   30 expr: expr . OR expr
   31     | expr . XOR expr
   31     | expr XOR expr .
   32     | expr . AND expr

    AND  shift, and go to state 80

    $default  reduce using rule 31 (expr)


state 112

   36 expr: bool_prim IS NOT . BOOL
   39 bool_prim: bool_prim IS NOT . NUL

    NUL   shift, and go to state 140
    BOOL  shift, and go to state 141


state 113

   38 bool_prim: bool_prim IS NUL .

    $default  reduce using rule 38 (bool_prim)


state 114

   35 expr: bool_prim IS BOOL .

    $default  reduce using rule 35 (expr)


state 115

   42 bool_prim: bool_prim CMP ANY . '(' st1 ')'

    '('  shift, and go to state 142


state 116

   41 bool_prim: bool_prim CMP ALL . '(' st1 ')'

    '('  shift, and go to state 143


state 117

   40 bool_prim: bool_prim CMP pred .

    $default  reduce using rule 40 (bool_prim)


state 118

   45 pred: bit_expr NOT pred1 .

    $default  reduce using rule 45 (pred)


state 119

   47 pred1: IN '(' . st1 ')'
   48      | IN '(' . expr_lst ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    st1          go to state 144
    expr         go to state 145
    bool_prim    go to state 59
    pred         go to state 60
    expr_lst     go to state 146
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 120

   49 pred1: BETWEEN bit_expr . AND pred
   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    AND  shift, and go to state 147
    LS   shift, and go to state 90
    RS   shift, and go to state 91
    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '|'  shift, and go to state 94
    '&'  shift, and go to state 95
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99


state 121

   50 pred1: LIKE simple_expr .

    $default  reduce using rule 50 (pred1)


state 122

   51 pred1: REG bit_expr .
   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    LS   shift, and go to state 90
    RS   shift, and go to state 91
    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '|'  shift, and go to state 94
    '&'  shift, and go to state 95
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 51 (pred1)


state 123

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   56         | bit_expr LS bit_expr .
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 56 (bit_expr)


state 124

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   57         | bit_expr RS bit_expr .
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 57 (bit_expr)


state 125

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   61         | bit_expr DIV bit_expr .
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 99

    $default  reduce using rule 61 (bit_expr)


state 126

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   62         | bit_expr MOD bit_expr .
   63         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 99

    $default  reduce using rule 62 (bit_expr)


state 127

   54 bit_expr: bit_expr . '|' bit_expr
   54         | bit_expr '|' bit_expr .
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    LS   shift, and go to state 90
    RS   shift, and go to state 91
    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '&'  shift, and go to state 95
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 54 (bit_expr)


state 128

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   55         | bit_expr '&' bit_expr .
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    LS   shift, and go to state 90
    RS   shift, and go to state 91
    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '+'  shift, and go to state 96
    '-'  shift, and go to state 97
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 55 (bit_expr)


state 129

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   58         | bit_expr '+' bit_expr .
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 58 (bit_expr)


state 130

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   59         | bit_expr '-' bit_expr .
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 92
    MOD  shift, and go to state 93
    '*'  shift, and go to state 98
    '^'  shift, and go to state 99

    $default  reduce using rule 59 (bit_expr)


state 131

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   60         | bit_expr '*' bit_expr .
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 99

    $default  reduce using rule 60 (bit_expr)


state 132

   54 bit_expr: bit_expr . '|' bit_expr
   55         | bit_expr . '&' bit_expr
   56         | bit_expr . LS bit_expr
   57         | bit_expr . RS bit_expr
   58         | bit_expr . '+' bit_expr
   59         | bit_expr . '-' bit_expr
   60         | bit_expr . '*' bit_expr
   61         | bit_expr . DIV bit_expr
   62         | bit_expr . MOD bit_expr
   63         | bit_expr . '^' bit_expr
   63         | bit_expr '^' bit_expr .

    $default  reduce using rule 63 (bit_expr)


state 133

   16 st7: ASC .

    $default  reduce using rule 16 (st7)


state 134

   15 st7: DESC .

    $default  reduce using rule 15 (st7)


state 135

    9 st4: ID st7 .

    $default  reduce using rule 9 (st4)


state 136

   10 st4: INT st7 .

    $default  reduce using rule 10 (st4)


state 137

    8 st4: st4 ',' . st4

    ID   shift, and go to state 101
    INT  shift, and go to state 102

    st4  go to state 148


state 138

    6 st3: GROUP BY st4 st5 .

    $default  reduce using rule 6 (st3)


state 139

   70 simple_expr: EXISTS '(' st1 ')' .

    $default  reduce using rule 70 (simple_expr)


state 140

   39 bool_prim: bool_prim IS NOT NUL .

    $default  reduce using rule 39 (bool_prim)


state 141

   36 expr: bool_prim IS NOT BOOL .

    $default  reduce using rule 36 (expr)


state 142

   42 bool_prim: bool_prim CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 149


state 143

   41 bool_prim: bool_prim CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 150


state 144

   47 pred1: IN '(' st1 . ')'

    ')'  shift, and go to state 151


state 145

   30 expr: expr . OR expr
   31     | expr . XOR expr
   32     | expr . AND expr
   52 expr_lst: expr . ',' expr_lst
   53         | expr .

    OR   shift, and go to state 79
    AND  shift, and go to state 80
    XOR  shift, and go to state 81
    ','  shift, and go to state 152

    $default  reduce using rule 53 (expr_lst)


state 146

   48 pred1: IN '(' expr_lst . ')'

    ')'  shift, and go to state 153


state 147

   49 pred1: BETWEEN bit_expr AND . pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 72
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    pred         go to state 154
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 148

    8 st4: st4 . ',' st4
    8    | st4 ',' st4 .

    $default  reduce using rule 8 (st4)


state 149

   42 bool_prim: bool_prim CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 155


state 150

   41 bool_prim: bool_prim CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 156


state 151

   47 pred1: IN '(' st1 ')' .

    $default  reduce using rule 47 (pred1)


state 152

   52 expr_lst: expr ',' . expr_lst

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 51
    NUL      shift, and go to state 9
    EXISTS   shift, and go to state 52
    BOOL     shift, and go to state 10
    INT      shift, and go to state 11
    FLOAT    shift, and go to state 12
    '+'      shift, and go to state 53
    '-'      shift, and go to state 54
    '('      shift, and go to state 55
    '~'      shift, and go to state 56
    '!'      shift, and go to state 57

    expr         go to state 145
    bool_prim    go to state 59
    pred         go to state 60
    expr_lst     go to state 157
    bit_expr     go to state 61
    simple_expr  go to state 62
    val          go to state 63


state 153

   48 pred1: IN '(' expr_lst ')' .

    $default  reduce using rule 48 (pred1)


state 154

   49 pred1: BETWEEN bit_expr AND pred .

    $default  reduce using rule 49 (pred1)


state 155

   42 bool_prim: bool_prim CMP ANY '(' st1 ')' .

    $default  reduce using rule 42 (bool_prim)


state 156

   41 bool_prim: bool_prim CMP ALL '(' st1 ')' .

    $default  reduce using rule 41 (bool_prim)


state 157

   52 expr_lst: expr ',' expr_lst .

    $default  reduce using rule 52 (expr_lst)
