Grammar

    0 $accept: start $end

    1 start: st1 ';'

    2 st1: SELECT attr FROM tableList st2
    3    | SELECT DISTINCT attr FROM tableList st2
    4    | SELECT ALL attr FROM tableList st2

    5 st2: WHERE expr st3
    6    | st3

    7 st3: GROUP BY st4 st5
    8    | st5

    9 st4: st4 ',' st4
   10    | expr st7

   11 st5: HAVING expr1 st6
   12    | st6

   13 st6: ORDER BY st8 st9
   14    | st9

   15 st7: DESC
   16    | ASC
   17    | /* empty */

   18 st8: st8 ',' st8
   19    | expr1 st7

   20 st9: LIMIT INT
   21    | LIMIT INT ',' INT
   22    | /* empty */

   23 attr: attrList
   24     | '*'

   25 attrList: attrList ',' attrList
   26         | expr1 alias

   27 alias: AS ID
   28      | /* empty */

   29 tableList: tableList ',' tableList
   30          | ID
   31          | '(' st1 ')' alias

   32 expr: expr OR expr
   33     | expr XOR expr
   34     | expr AND expr
   35     | NOT expr
   36     | '(' expr ')'
   37     | bool_prim IS BOOL
   38     | bool_prim IS NOT BOOL
   39     | bool_prim

   40 bool_prim: bool_prim IS NUL
   41          | bool_prim IS NOT NUL
   42          | bool_prim CMP pred
   43          | bool_prim CMP ALL '(' st1 ')'
   44          | bool_prim CMP ANY '(' st1 ')'
   45          | pred

   46 pred: bit_expr pred1
   47     | bit_expr NOT pred1
   48     | bit_expr

   49 pred1: IN '(' st1 ')'
   50      | IN '(' expr_lst ')'
   51      | BETWEEN bit_expr AND pred
   52      | LIKE simple_expr
   53      | REG bit_expr

   54 expr_lst: expr ',' expr_lst
   55         | expr

   56 bit_expr: bit_expr '|' bit_expr
   57         | bit_expr '&' bit_expr
   58         | bit_expr LS bit_expr
   59         | bit_expr RS bit_expr
   60         | bit_expr '+' bit_expr
   61         | bit_expr '-' bit_expr
   62         | bit_expr '*' bit_expr
   63         | bit_expr DIV bit_expr
   64         | bit_expr MOD bit_expr
   65         | bit_expr '^' bit_expr
   66         | simple_expr

   67 simple_expr: '+' simple_expr
   68            | '-' simple_expr
   69            | '~' simple_expr
   70            | '!' simple_expr
   71            | '(' st1 ')'
   72            | EXISTS '(' st1 ')'
   73            | val

   74 val: FLOAT
   75    | NUL
   76    | LITERAL
   77    | BOOL
   78    | ID
   79    | INT

   80 expr1: expr1 OR expr1
   81      | expr1 XOR expr1
   82      | expr1 AND expr1
   83      | NOT expr1
   84      | '(' expr1 ')'
   85      | bool_prim1 IS BOOL
   86      | bool_prim1 IS NOT BOOL
   87      | bool_prim1

   88 bool_prim1: bool_prim1 IS NUL
   89           | bool_prim1 IS NOT NUL
   90           | bool_prim1 CMP pred2
   91           | bool_prim1 CMP ALL '(' st1 ')'
   92           | bool_prim1 CMP ANY '(' st1 ')'
   93           | pred2

   94 pred2: bit_expr1 pred3
   95      | bit_expr1 NOT pred3
   96      | bit_expr1

   97 pred3: IN '(' st1 ')'
   98      | IN '(' expr1_lst ')'
   99      | BETWEEN bit_expr1 AND pred2
  100      | LIKE simple_expr1
  101      | REG bit_expr1

  102 expr1_lst: expr1 ',' expr1_lst
  103          | expr1

  104 bit_expr1: bit_expr1 '|' bit_expr1
  105          | bit_expr1 '&' bit_expr1
  106          | bit_expr1 LS bit_expr1
  107          | bit_expr1 RS bit_expr1
  108          | bit_expr1 '+' bit_expr1
  109          | bit_expr1 '-' bit_expr1
  110          | bit_expr1 '*' bit_expr1
  111          | bit_expr1 DIV bit_expr1
  112          | bit_expr1 MOD bit_expr1
  113          | bit_expr1 '^' bit_expr1
  114          | simple_expr1

  115 simple_expr1: '+' simple_expr1
  116             | '-' simple_expr1
  117             | '~' simple_expr1
  118             | '!' simple_expr1
  119             | '(' st1 ')'
  120             | EXISTS '(' st1 ')'
  121             | FUNC '(' val ')'
  122             | FUNC '(' DISTINCT val ')'
  123             | COUNT
  124             | val


Terminals, with rules where they appear

$end (0) 0
'!' (33) 70 118
'&' (38) 57 105
'(' (40) 31 36 43 44 49 50 71 72 84 91 92 97 98 119 120 121 122
')' (41) 31 36 43 44 49 50 71 72 84 91 92 97 98 119 120 121 122
'*' (42) 24 62 110
'+' (43) 60 67 108 115
',' (44) 9 18 21 25 29 54 102
'-' (45) 61 68 109 116
';' (59) 1
'^' (94) 65 113
'|' (124) 56 104
'~' (126) 69 117
error (256)
SELECT (258) 2 3 4
DISTINCT (259) 3 122
AS (260) 27
FUNC (261) 121 122
COUNT (262) 123
FROM (263) 2 3 4
WHERE (264) 5
GROUP (265) 7
HAVING (266) 11
ORDER (267) 13
BY (268) 7 13
LIMIT (269) 20 21
ASC (270) 16
DESC (271) 15
ID (272) 27 30 78
LITERAL (273) 76
OR (274) 32 80
AND (275) 34 51 82 99
XOR (276) 33 81
NOT (277) 35 38 41 47 83 86 89 95
IS (278) 37 38 40 41 85 86 88 89
NUL (279) 40 41 75 88 89
ANY (280) 44 92
ALL (281) 4 43 91
CMP (282) 42 43 44 90 91 92
IN (283) 49 50 97 98
BETWEEN (284) 51 99
LIKE (285) 52 100
REG (286) 53 101
LS (287) 58 106
RS (288) 59 107
DIV (289) 63 111
MOD (290) 64 112
EXISTS (291) 72 120
BOOL (292) 37 38 77 85 86
INT (293) 20 21 79
FLOAT (294) 74
UMINUS (295)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
st1 (55)
    on left: 2 3 4, on right: 1 31 43 44 49 71 72 91 92 97 119 120
st2 (56)
    on left: 5 6, on right: 2 3 4
st3 (57)
    on left: 7 8, on right: 5 6
st4 (58)
    on left: 9 10, on right: 7 9
st5 (59)
    on left: 11 12, on right: 7 8
st6 (60)
    on left: 13 14, on right: 11 12
st7 (61)
    on left: 15 16 17, on right: 10 19
st8 (62)
    on left: 18 19, on right: 13 18
st9 (63)
    on left: 20 21 22, on right: 13 14
attr (64)
    on left: 23 24, on right: 2 3 4
attrList (65)
    on left: 25 26, on right: 23 25
alias (66)
    on left: 27 28, on right: 26 31
tableList (67)
    on left: 29 30 31, on right: 2 3 4 29
expr (68)
    on left: 32 33 34 35 36 37 38 39, on right: 5 10 32 33 34 35 36
    54 55
bool_prim (69)
    on left: 40 41 42 43 44 45, on right: 37 38 39 40 41 42 43 44
pred (70)
    on left: 46 47 48, on right: 42 45 51
pred1 (71)
    on left: 49 50 51 52 53, on right: 46 47
expr_lst (72)
    on left: 54 55, on right: 50 54
bit_expr (73)
    on left: 56 57 58 59 60 61 62 63 64 65 66, on right: 46 47 48 51
    53 56 57 58 59 60 61 62 63 64 65
simple_expr (74)
    on left: 67 68 69 70 71 72 73, on right: 52 66 67 68 69 70
val (75)
    on left: 74 75 76 77 78 79, on right: 73 121 122 124
expr1 (76)
    on left: 80 81 82 83 84 85 86 87, on right: 11 19 26 80 81 82 83
    84 102 103
bool_prim1 (77)
    on left: 88 89 90 91 92 93, on right: 85 86 87 88 89 90 91 92
pred2 (78)
    on left: 94 95 96, on right: 90 93 99
pred3 (79)
    on left: 97 98 99 100 101, on right: 94 95
expr1_lst (80)
    on left: 102 103, on right: 98 102
bit_expr1 (81)
    on left: 104 105 106 107 108 109 110 111 112 113 114, on right:
    94 95 96 99 101 104 105 106 107 108 109 110 111 112 113
simple_expr1 (82)
    on left: 115 116 117 118 119 120 121 122 123 124, on right: 100
    114 115 116 117 118


state 0

    0 $accept: . start $end

    SELECT  shift, and go to state 1

    start  go to state 2
    st1    go to state 3


state 1

    2 st1: SELECT . attr FROM tableList st2
    3    | SELECT . DISTINCT attr FROM tableList st2
    4    | SELECT . ALL attr FROM tableList st2

    DISTINCT  shift, and go to state 4
    FUNC      shift, and go to state 5
    COUNT     shift, and go to state 6
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NOT       shift, and go to state 9
    NUL       shift, and go to state 10
    ALL       shift, and go to state 11
    EXISTS    shift, and go to state 12
    BOOL      shift, and go to state 13
    INT       shift, and go to state 14
    FLOAT     shift, and go to state 15
    '+'       shift, and go to state 16
    '-'       shift, and go to state 17
    '*'       shift, and go to state 18
    '('       shift, and go to state 19
    '~'       shift, and go to state 20
    '!'       shift, and go to state 21

    attr          go to state 22
    attrList      go to state 23
    val           go to state 24
    expr1         go to state 25
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 2

    0 $accept: start . $end

    $end  shift, and go to state 30


state 3

    1 start: st1 . ';'

    ';'  shift, and go to state 31


state 4

    3 st1: SELECT DISTINCT . attr FROM tableList st2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '*'      shift, and go to state 18
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    attr          go to state 32
    attrList      go to state 23
    val           go to state 24
    expr1         go to state 25
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 5

  121 simple_expr1: FUNC . '(' val ')'
  122             | FUNC . '(' DISTINCT val ')'

    '('  shift, and go to state 33


state 6

  123 simple_expr1: COUNT .

    $default  reduce using rule 123 (simple_expr1)


state 7

   78 val: ID .

    $default  reduce using rule 78 (val)


state 8

   76 val: LITERAL .

    $default  reduce using rule 76 (val)


state 9

   83 expr1: NOT . expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 34
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 10

   75 val: NUL .

    $default  reduce using rule 75 (val)


state 11

    4 st1: SELECT ALL . attr FROM tableList st2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '*'      shift, and go to state 18
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    attr          go to state 35
    attrList      go to state 23
    val           go to state 24
    expr1         go to state 25
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 12

  120 simple_expr1: EXISTS . '(' st1 ')'

    '('  shift, and go to state 36


state 13

   77 val: BOOL .

    $default  reduce using rule 77 (val)


state 14

   79 val: INT .

    $default  reduce using rule 79 (val)


state 15

   74 val: FLOAT .

    $default  reduce using rule 74 (val)


state 16

  115 simple_expr1: '+' . simple_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    simple_expr1  go to state 38


state 17

  116 simple_expr1: '-' . simple_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    simple_expr1  go to state 39


state 18

   24 attr: '*' .

    $default  reduce using rule 24 (attr)


state 19

   84 expr1: '(' . expr1 ')'
  119 simple_expr1: '(' . st1 ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    st1           go to state 40
    val           go to state 24
    expr1         go to state 41
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 20

  117 simple_expr1: '~' . simple_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    simple_expr1  go to state 42


state 21

  118 simple_expr1: '!' . simple_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    simple_expr1  go to state 43


state 22

    2 st1: SELECT attr . FROM tableList st2

    FROM  shift, and go to state 44


state 23

   23 attr: attrList .
   25 attrList: attrList . ',' attrList

    ','  shift, and go to state 45

    $default  reduce using rule 23 (attr)


state 24

  124 simple_expr1: val .

    $default  reduce using rule 124 (simple_expr1)


state 25

   26 attrList: expr1 . alias
   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1

    AS   shift, and go to state 46
    OR   shift, and go to state 47
    AND  shift, and go to state 48
    XOR  shift, and go to state 49

    $default  reduce using rule 28 (alias)

    alias  go to state 50


state 26

   85 expr1: bool_prim1 . IS BOOL
   86      | bool_prim1 . IS NOT BOOL
   87      | bool_prim1 .
   88 bool_prim1: bool_prim1 . IS NUL
   89           | bool_prim1 . IS NOT NUL
   90           | bool_prim1 . CMP pred2
   91           | bool_prim1 . CMP ALL '(' st1 ')'
   92           | bool_prim1 . CMP ANY '(' st1 ')'

    IS   shift, and go to state 51
    CMP  shift, and go to state 52

    $default  reduce using rule 87 (expr1)


state 27

   93 bool_prim1: pred2 .

    $default  reduce using rule 93 (bool_prim1)


state 28

   94 pred2: bit_expr1 . pred3
   95      | bit_expr1 . NOT pred3
   96      | bit_expr1 .
  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    NOT      shift, and go to state 53
    IN       shift, and go to state 54
    BETWEEN  shift, and go to state 55
    LIKE     shift, and go to state 56
    REG      shift, and go to state 57
    LS       shift, and go to state 58
    RS       shift, and go to state 59
    DIV      shift, and go to state 60
    MOD      shift, and go to state 61
    '|'      shift, and go to state 62
    '&'      shift, and go to state 63
    '+'      shift, and go to state 64
    '-'      shift, and go to state 65
    '*'      shift, and go to state 66
    '^'      shift, and go to state 67

    $default  reduce using rule 96 (pred2)

    pred3  go to state 68


state 29

  114 bit_expr1: simple_expr1 .

    $default  reduce using rule 114 (bit_expr1)


state 30

    0 $accept: start $end .

    $default  accept


state 31

    1 start: st1 ';' .

    $default  reduce using rule 1 (start)


state 32

    3 st1: SELECT DISTINCT attr . FROM tableList st2

    FROM  shift, and go to state 69


state 33

  121 simple_expr1: FUNC '(' . val ')'
  122             | FUNC '(' . DISTINCT val ')'

    DISTINCT  shift, and go to state 70
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NUL       shift, and go to state 10
    BOOL      shift, and go to state 13
    INT       shift, and go to state 14
    FLOAT     shift, and go to state 15

    val  go to state 71


state 34

   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1
   83      | NOT expr1 .

    $default  reduce using rule 83 (expr1)


state 35

    4 st1: SELECT ALL attr . FROM tableList st2

    FROM  shift, and go to state 72


state 36

  120 simple_expr1: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 73


state 37

  119 simple_expr1: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 40


state 38

  115 simple_expr1: '+' simple_expr1 .

    $default  reduce using rule 115 (simple_expr1)


state 39

  116 simple_expr1: '-' simple_expr1 .

    $default  reduce using rule 116 (simple_expr1)


state 40

  119 simple_expr1: '(' st1 . ')'

    ')'  shift, and go to state 74


state 41

   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1
   84      | '(' expr1 . ')'

    OR   shift, and go to state 47
    AND  shift, and go to state 48
    XOR  shift, and go to state 49
    ')'  shift, and go to state 75


state 42

  117 simple_expr1: '~' simple_expr1 .

    $default  reduce using rule 117 (simple_expr1)


state 43

  118 simple_expr1: '!' simple_expr1 .

    $default  reduce using rule 118 (simple_expr1)


state 44

    2 st1: SELECT attr FROM . tableList st2

    ID   shift, and go to state 76
    '('  shift, and go to state 77

    tableList  go to state 78


state 45

   25 attrList: attrList ',' . attrList

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    attrList      go to state 79
    val           go to state 24
    expr1         go to state 25
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 46

   27 alias: AS . ID

    ID  shift, and go to state 80


state 47

   80 expr1: expr1 OR . expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 81
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 48

   82 expr1: expr1 AND . expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 82
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 49

   81 expr1: expr1 XOR . expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 83
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 50

   26 attrList: expr1 alias .

    $default  reduce using rule 26 (attrList)


state 51

   85 expr1: bool_prim1 IS . BOOL
   86      | bool_prim1 IS . NOT BOOL
   88 bool_prim1: bool_prim1 IS . NUL
   89           | bool_prim1 IS . NOT NUL

    NOT   shift, and go to state 84
    NUL   shift, and go to state 85
    BOOL  shift, and go to state 86


state 52

   90 bool_prim1: bool_prim1 CMP . pred2
   91           | bool_prim1 CMP . ALL '(' st1 ')'
   92           | bool_prim1 CMP . ANY '(' st1 ')'

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 87
    ALL      shift, and go to state 88
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    pred2         go to state 89
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 53

   95 pred2: bit_expr1 NOT . pred3

    IN       shift, and go to state 54
    BETWEEN  shift, and go to state 55
    LIKE     shift, and go to state 56
    REG      shift, and go to state 57

    pred3  go to state 90


state 54

   97 pred3: IN . '(' st1 ')'
   98      | IN . '(' expr1_lst ')'

    '('  shift, and go to state 91


state 55

   99 pred3: BETWEEN . bit_expr1 AND pred2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 92
    simple_expr1  go to state 29


state 56

  100 pred3: LIKE . simple_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    simple_expr1  go to state 93


state 57

  101 pred3: REG . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 94
    simple_expr1  go to state 29


state 58

  106 bit_expr1: bit_expr1 LS . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 95
    simple_expr1  go to state 29


state 59

  107 bit_expr1: bit_expr1 RS . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 96
    simple_expr1  go to state 29


state 60

  111 bit_expr1: bit_expr1 DIV . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 97
    simple_expr1  go to state 29


state 61

  112 bit_expr1: bit_expr1 MOD . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 98
    simple_expr1  go to state 29


state 62

  104 bit_expr1: bit_expr1 '|' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 99
    simple_expr1  go to state 29


state 63

  105 bit_expr1: bit_expr1 '&' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 100
    simple_expr1  go to state 29


state 64

  108 bit_expr1: bit_expr1 '+' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 101
    simple_expr1  go to state 29


state 65

  109 bit_expr1: bit_expr1 '-' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 102
    simple_expr1  go to state 29


state 66

  110 bit_expr1: bit_expr1 '*' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 103
    simple_expr1  go to state 29


state 67

  113 bit_expr1: bit_expr1 '^' . bit_expr1

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    bit_expr1     go to state 104
    simple_expr1  go to state 29


state 68

   94 pred2: bit_expr1 pred3 .

    $default  reduce using rule 94 (pred2)


state 69

    3 st1: SELECT DISTINCT attr FROM . tableList st2

    ID   shift, and go to state 76
    '('  shift, and go to state 77

    tableList  go to state 105


state 70

  122 simple_expr1: FUNC '(' DISTINCT . val ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15

    val  go to state 106


state 71

  121 simple_expr1: FUNC '(' val . ')'

    ')'  shift, and go to state 107


state 72

    4 st1: SELECT ALL attr FROM . tableList st2

    ID   shift, and go to state 76
    '('  shift, and go to state 77

    tableList  go to state 108


state 73

  120 simple_expr1: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 109


state 74

  119 simple_expr1: '(' st1 ')' .

    $default  reduce using rule 119 (simple_expr1)


state 75

   84 expr1: '(' expr1 ')' .

    $default  reduce using rule 84 (expr1)


state 76

   30 tableList: ID .

    $default  reduce using rule 30 (tableList)


state 77

   31 tableList: '(' . st1 ')' alias

    SELECT  shift, and go to state 1

    st1  go to state 110


state 78

    2 st1: SELECT attr FROM tableList . st2
   29 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 111
    GROUP   shift, and go to state 112
    HAVING  shift, and go to state 113
    ORDER   shift, and go to state 114
    LIMIT   shift, and go to state 115
    ','     shift, and go to state 116

    $default  reduce using rule 22 (st9)

    st2  go to state 117
    st3  go to state 118
    st5  go to state 119
    st6  go to state 120
    st9  go to state 121


state 79

   25 attrList: attrList . ',' attrList
   25         | attrList ',' attrList .

    $default  reduce using rule 25 (attrList)


state 80

   27 alias: AS ID .

    $default  reduce using rule 27 (alias)


state 81

   80 expr1: expr1 . OR expr1
   80      | expr1 OR expr1 .
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1

    AND  shift, and go to state 48
    XOR  shift, and go to state 49

    $default  reduce using rule 80 (expr1)


state 82

   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1
   82      | expr1 AND expr1 .

    $default  reduce using rule 82 (expr1)


state 83

   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   81      | expr1 XOR expr1 .
   82      | expr1 . AND expr1

    AND  shift, and go to state 48

    $default  reduce using rule 81 (expr1)


state 84

   86 expr1: bool_prim1 IS NOT . BOOL
   89 bool_prim1: bool_prim1 IS NOT . NUL

    NUL   shift, and go to state 122
    BOOL  shift, and go to state 123


state 85

   88 bool_prim1: bool_prim1 IS NUL .

    $default  reduce using rule 88 (bool_prim1)


state 86

   85 expr1: bool_prim1 IS BOOL .

    $default  reduce using rule 85 (expr1)


state 87

   92 bool_prim1: bool_prim1 CMP ANY . '(' st1 ')'

    '('  shift, and go to state 124


state 88

   91 bool_prim1: bool_prim1 CMP ALL . '(' st1 ')'

    '('  shift, and go to state 125


state 89

   90 bool_prim1: bool_prim1 CMP pred2 .

    $default  reduce using rule 90 (bool_prim1)


state 90

   95 pred2: bit_expr1 NOT pred3 .

    $default  reduce using rule 95 (pred2)


state 91

   97 pred3: IN '(' . st1 ')'
   98      | IN '(' . expr1_lst ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    st1           go to state 126
    val           go to state 24
    expr1         go to state 127
    bool_prim1    go to state 26
    pred2         go to state 27
    expr1_lst     go to state 128
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 92

   99 pred3: BETWEEN bit_expr1 . AND pred2
  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    AND  shift, and go to state 129
    LS   shift, and go to state 58
    RS   shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '|'  shift, and go to state 62
    '&'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67


state 93

  100 pred3: LIKE simple_expr1 .

    $default  reduce using rule 100 (pred3)


state 94

  101 pred3: REG bit_expr1 .
  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 58
    RS   shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '|'  shift, and go to state 62
    '&'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 101 (pred3)


state 95

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  106          | bit_expr1 LS bit_expr1 .
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 106 (bit_expr1)


state 96

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  107          | bit_expr1 RS bit_expr1 .
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 107 (bit_expr1)


state 97

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  111          | bit_expr1 DIV bit_expr1 .
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 67

    $default  reduce using rule 111 (bit_expr1)


state 98

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  112          | bit_expr1 MOD bit_expr1 .
  113          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 67

    $default  reduce using rule 112 (bit_expr1)


state 99

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  104          | bit_expr1 '|' bit_expr1 .
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 58
    RS   shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '&'  shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 104 (bit_expr1)


state 100

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  105          | bit_expr1 '&' bit_expr1 .
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 58
    RS   shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 105 (bit_expr1)


state 101

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  108          | bit_expr1 '+' bit_expr1 .
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 108 (bit_expr1)


state 102

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  109          | bit_expr1 '-' bit_expr1 .
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 60
    MOD  shift, and go to state 61
    '*'  shift, and go to state 66
    '^'  shift, and go to state 67

    $default  reduce using rule 109 (bit_expr1)


state 103

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  110          | bit_expr1 '*' bit_expr1 .
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 67

    $default  reduce using rule 110 (bit_expr1)


state 104

  104 bit_expr1: bit_expr1 . '|' bit_expr1
  105          | bit_expr1 . '&' bit_expr1
  106          | bit_expr1 . LS bit_expr1
  107          | bit_expr1 . RS bit_expr1
  108          | bit_expr1 . '+' bit_expr1
  109          | bit_expr1 . '-' bit_expr1
  110          | bit_expr1 . '*' bit_expr1
  111          | bit_expr1 . DIV bit_expr1
  112          | bit_expr1 . MOD bit_expr1
  113          | bit_expr1 . '^' bit_expr1
  113          | bit_expr1 '^' bit_expr1 .

    $default  reduce using rule 113 (bit_expr1)


state 105

    3 st1: SELECT DISTINCT attr FROM tableList . st2
   29 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 111
    GROUP   shift, and go to state 112
    HAVING  shift, and go to state 113
    ORDER   shift, and go to state 114
    LIMIT   shift, and go to state 115
    ','     shift, and go to state 116

    $default  reduce using rule 22 (st9)

    st2  go to state 130
    st3  go to state 118
    st5  go to state 119
    st6  go to state 120
    st9  go to state 121


state 106

  122 simple_expr1: FUNC '(' DISTINCT val . ')'

    ')'  shift, and go to state 131


state 107

  121 simple_expr1: FUNC '(' val ')' .

    $default  reduce using rule 121 (simple_expr1)


state 108

    4 st1: SELECT ALL attr FROM tableList . st2
   29 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 111
    GROUP   shift, and go to state 112
    HAVING  shift, and go to state 113
    ORDER   shift, and go to state 114
    LIMIT   shift, and go to state 115
    ','     shift, and go to state 116

    $default  reduce using rule 22 (st9)

    st2  go to state 132
    st3  go to state 118
    st5  go to state 119
    st6  go to state 120
    st9  go to state 121


state 109

  120 simple_expr1: EXISTS '(' st1 ')' .

    $default  reduce using rule 120 (simple_expr1)


state 110

   31 tableList: '(' st1 . ')' alias

    ')'  shift, and go to state 133


state 111

    5 st2: WHERE . expr st3

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 141
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 112

    7 st3: GROUP . BY st4 st5

    BY  shift, and go to state 147


state 113

   11 st5: HAVING . expr1 st6

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 148
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 114

   13 st6: ORDER . BY st8 st9

    BY  shift, and go to state 149


state 115

   20 st9: LIMIT . INT
   21    | LIMIT . INT ',' INT

    INT  shift, and go to state 150


state 116

   29 tableList: tableList ',' . tableList

    ID   shift, and go to state 76
    '('  shift, and go to state 77

    tableList  go to state 151


state 117

    2 st1: SELECT attr FROM tableList st2 .

    $default  reduce using rule 2 (st1)


state 118

    6 st2: st3 .

    $default  reduce using rule 6 (st2)


state 119

    8 st3: st5 .

    $default  reduce using rule 8 (st3)


state 120

   12 st5: st6 .

    $default  reduce using rule 12 (st5)


state 121

   14 st6: st9 .

    $default  reduce using rule 14 (st6)


state 122

   89 bool_prim1: bool_prim1 IS NOT NUL .

    $default  reduce using rule 89 (bool_prim1)


state 123

   86 expr1: bool_prim1 IS NOT BOOL .

    $default  reduce using rule 86 (expr1)


state 124

   92 bool_prim1: bool_prim1 CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 152


state 125

   91 bool_prim1: bool_prim1 CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 153


state 126

   97 pred3: IN '(' st1 . ')'

    ')'  shift, and go to state 154


state 127

   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1
  102 expr1_lst: expr1 . ',' expr1_lst
  103          | expr1 .

    OR   shift, and go to state 47
    AND  shift, and go to state 48
    XOR  shift, and go to state 49
    ','  shift, and go to state 155

    $default  reduce using rule 103 (expr1_lst)


state 128

   98 pred3: IN '(' expr1_lst . ')'

    ')'  shift, and go to state 156


state 129

   99 pred3: BETWEEN bit_expr1 AND . pred2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 37
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    pred2         go to state 157
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 130

    3 st1: SELECT DISTINCT attr FROM tableList st2 .

    $default  reduce using rule 3 (st1)


state 131

  122 simple_expr1: FUNC '(' DISTINCT val ')' .

    $default  reduce using rule 122 (simple_expr1)


state 132

    4 st1: SELECT ALL attr FROM tableList st2 .

    $default  reduce using rule 4 (st1)


state 133

   31 tableList: '(' st1 ')' . alias

    AS  shift, and go to state 46

    $default  reduce using rule 28 (alias)

    alias  go to state 158


state 134

   35 expr: NOT . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 159
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 135

   72 simple_expr: EXISTS . '(' st1 ')'

    '('  shift, and go to state 160


state 136

   67 simple_expr: '+' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    simple_expr  go to state 162
    val          go to state 146


state 137

   68 simple_expr: '-' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    simple_expr  go to state 163
    val          go to state 146


state 138

   36 expr: '(' . expr ')'
   71 simple_expr: '(' . st1 ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    st1          go to state 164
    expr         go to state 165
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 139

   69 simple_expr: '~' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    simple_expr  go to state 166
    val          go to state 146


state 140

   70 simple_expr: '!' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    simple_expr  go to state 167
    val          go to state 146


state 141

    5 st2: WHERE expr . st3
   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr

    GROUP   shift, and go to state 112
    HAVING  shift, and go to state 113
    ORDER   shift, and go to state 114
    LIMIT   shift, and go to state 115
    OR      shift, and go to state 168
    AND     shift, and go to state 169
    XOR     shift, and go to state 170

    $default  reduce using rule 22 (st9)

    st3  go to state 171
    st5  go to state 119
    st6  go to state 120
    st9  go to state 121


state 142

   37 expr: bool_prim . IS BOOL
   38     | bool_prim . IS NOT BOOL
   39     | bool_prim .
   40 bool_prim: bool_prim . IS NUL
   41          | bool_prim . IS NOT NUL
   42          | bool_prim . CMP pred
   43          | bool_prim . CMP ALL '(' st1 ')'
   44          | bool_prim . CMP ANY '(' st1 ')'

    IS   shift, and go to state 172
    CMP  shift, and go to state 173

    $default  reduce using rule 39 (expr)


state 143

   45 bool_prim: pred .

    $default  reduce using rule 45 (bool_prim)


state 144

   46 pred: bit_expr . pred1
   47     | bit_expr . NOT pred1
   48     | bit_expr .
   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    NOT      shift, and go to state 174
    IN       shift, and go to state 175
    BETWEEN  shift, and go to state 176
    LIKE     shift, and go to state 177
    REG      shift, and go to state 178
    LS       shift, and go to state 179
    RS       shift, and go to state 180
    DIV      shift, and go to state 181
    MOD      shift, and go to state 182
    '|'      shift, and go to state 183
    '&'      shift, and go to state 184
    '+'      shift, and go to state 185
    '-'      shift, and go to state 186
    '*'      shift, and go to state 187
    '^'      shift, and go to state 188

    $default  reduce using rule 48 (pred)

    pred1  go to state 189


state 145

   66 bit_expr: simple_expr .

    $default  reduce using rule 66 (bit_expr)


state 146

   73 simple_expr: val .

    $default  reduce using rule 73 (simple_expr)


state 147

    7 st3: GROUP BY . st4 st5

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    st4          go to state 190
    expr         go to state 191
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 148

   11 st5: HAVING expr1 . st6
   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1

    ORDER  shift, and go to state 114
    LIMIT  shift, and go to state 115
    OR     shift, and go to state 47
    AND    shift, and go to state 48
    XOR    shift, and go to state 49

    $default  reduce using rule 22 (st9)

    st6  go to state 192
    st9  go to state 121


state 149

   13 st6: ORDER BY . st8 st9

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    st8           go to state 193
    val           go to state 24
    expr1         go to state 194
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 150

   20 st9: LIMIT INT .
   21    | LIMIT INT . ',' INT

    ','  shift, and go to state 195

    $default  reduce using rule 20 (st9)


state 151

   29 tableList: tableList . ',' tableList
   29          | tableList ',' tableList .

    $default  reduce using rule 29 (tableList)


state 152

   92 bool_prim1: bool_prim1 CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 196


state 153

   91 bool_prim1: bool_prim1 CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 197


state 154

   97 pred3: IN '(' st1 ')' .

    $default  reduce using rule 97 (pred3)


state 155

  102 expr1_lst: expr1 ',' . expr1_lst

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    val           go to state 24
    expr1         go to state 127
    bool_prim1    go to state 26
    pred2         go to state 27
    expr1_lst     go to state 198
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 156

   98 pred3: IN '(' expr1_lst ')' .

    $default  reduce using rule 98 (pred3)


state 157

   99 pred3: BETWEEN bit_expr1 AND pred2 .

    $default  reduce using rule 99 (pred3)


state 158

   31 tableList: '(' st1 ')' alias .

    $default  reduce using rule 31 (tableList)


state 159

   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr
   35     | NOT expr .

    $default  reduce using rule 35 (expr)


state 160

   72 simple_expr: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 199


state 161

   71 simple_expr: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 164


state 162

   67 simple_expr: '+' simple_expr .

    $default  reduce using rule 67 (simple_expr)


state 163

   68 simple_expr: '-' simple_expr .

    $default  reduce using rule 68 (simple_expr)


state 164

   71 simple_expr: '(' st1 . ')'

    ')'  shift, and go to state 200


state 165

   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr
   36     | '(' expr . ')'

    OR   shift, and go to state 168
    AND  shift, and go to state 169
    XOR  shift, and go to state 170
    ')'  shift, and go to state 201


state 166

   69 simple_expr: '~' simple_expr .

    $default  reduce using rule 69 (simple_expr)


state 167

   70 simple_expr: '!' simple_expr .

    $default  reduce using rule 70 (simple_expr)


state 168

   32 expr: expr OR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 202
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 169

   34 expr: expr AND . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 203
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 170

   33 expr: expr XOR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 204
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 171

    5 st2: WHERE expr st3 .

    $default  reduce using rule 5 (st2)


state 172

   37 expr: bool_prim IS . BOOL
   38     | bool_prim IS . NOT BOOL
   40 bool_prim: bool_prim IS . NUL
   41          | bool_prim IS . NOT NUL

    NOT   shift, and go to state 205
    NUL   shift, and go to state 206
    BOOL  shift, and go to state 207


state 173

   42 bool_prim: bool_prim CMP . pred
   43          | bool_prim CMP . ALL '(' st1 ')'
   44          | bool_prim CMP . ANY '(' st1 ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 208
    ALL      shift, and go to state 209
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    pred         go to state 210
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 174

   47 pred: bit_expr NOT . pred1

    IN       shift, and go to state 175
    BETWEEN  shift, and go to state 176
    LIKE     shift, and go to state 177
    REG      shift, and go to state 178

    pred1  go to state 211


state 175

   49 pred1: IN . '(' st1 ')'
   50      | IN . '(' expr_lst ')'

    '('  shift, and go to state 212


state 176

   51 pred1: BETWEEN . bit_expr AND pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 213
    simple_expr  go to state 145
    val          go to state 146


state 177

   52 pred1: LIKE . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    simple_expr  go to state 214
    val          go to state 146


state 178

   53 pred1: REG . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 215
    simple_expr  go to state 145
    val          go to state 146


state 179

   58 bit_expr: bit_expr LS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 216
    simple_expr  go to state 145
    val          go to state 146


state 180

   59 bit_expr: bit_expr RS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 217
    simple_expr  go to state 145
    val          go to state 146


state 181

   63 bit_expr: bit_expr DIV . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 218
    simple_expr  go to state 145
    val          go to state 146


state 182

   64 bit_expr: bit_expr MOD . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 219
    simple_expr  go to state 145
    val          go to state 146


state 183

   56 bit_expr: bit_expr '|' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 220
    simple_expr  go to state 145
    val          go to state 146


state 184

   57 bit_expr: bit_expr '&' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 221
    simple_expr  go to state 145
    val          go to state 146


state 185

   60 bit_expr: bit_expr '+' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 222
    simple_expr  go to state 145
    val          go to state 146


state 186

   61 bit_expr: bit_expr '-' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 223
    simple_expr  go to state 145
    val          go to state 146


state 187

   62 bit_expr: bit_expr '*' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 224
    simple_expr  go to state 145
    val          go to state 146


state 188

   65 bit_expr: bit_expr '^' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    bit_expr     go to state 225
    simple_expr  go to state 145
    val          go to state 146


state 189

   46 pred: bit_expr pred1 .

    $default  reduce using rule 46 (pred)


state 190

    7 st3: GROUP BY st4 . st5
    9 st4: st4 . ',' st4

    HAVING  shift, and go to state 113
    ORDER   shift, and go to state 114
    LIMIT   shift, and go to state 115
    ','     shift, and go to state 226

    $default  reduce using rule 22 (st9)

    st5  go to state 227
    st6  go to state 120
    st9  go to state 121


state 191

   10 st4: expr . st7
   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr

    ASC   shift, and go to state 228
    DESC  shift, and go to state 229
    OR    shift, and go to state 168
    AND   shift, and go to state 169
    XOR   shift, and go to state 170

    $default  reduce using rule 17 (st7)

    st7  go to state 230


state 192

   11 st5: HAVING expr1 st6 .

    $default  reduce using rule 11 (st5)


state 193

   13 st6: ORDER BY st8 . st9
   18 st8: st8 . ',' st8

    LIMIT  shift, and go to state 115
    ','    shift, and go to state 231

    $default  reduce using rule 22 (st9)

    st9  go to state 232


state 194

   19 st8: expr1 . st7
   80 expr1: expr1 . OR expr1
   81      | expr1 . XOR expr1
   82      | expr1 . AND expr1

    ASC   shift, and go to state 228
    DESC  shift, and go to state 229
    OR    shift, and go to state 47
    AND   shift, and go to state 48
    XOR   shift, and go to state 49

    $default  reduce using rule 17 (st7)

    st7  go to state 233


state 195

   21 st9: LIMIT INT ',' . INT

    INT  shift, and go to state 234


state 196

   92 bool_prim1: bool_prim1 CMP ANY '(' st1 ')' .

    $default  reduce using rule 92 (bool_prim1)


state 197

   91 bool_prim1: bool_prim1 CMP ALL '(' st1 ')' .

    $default  reduce using rule 91 (bool_prim1)


state 198

  102 expr1_lst: expr1 ',' expr1_lst .

    $default  reduce using rule 102 (expr1_lst)


state 199

   72 simple_expr: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 235


state 200

   71 simple_expr: '(' st1 ')' .

    $default  reduce using rule 71 (simple_expr)


state 201

   36 expr: '(' expr ')' .

    $default  reduce using rule 36 (expr)


state 202

   32 expr: expr . OR expr
   32     | expr OR expr .
   33     | expr . XOR expr
   34     | expr . AND expr

    AND  shift, and go to state 169
    XOR  shift, and go to state 170

    $default  reduce using rule 32 (expr)


state 203

   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr
   34     | expr AND expr .

    $default  reduce using rule 34 (expr)


state 204

   32 expr: expr . OR expr
   33     | expr . XOR expr
   33     | expr XOR expr .
   34     | expr . AND expr

    AND  shift, and go to state 169

    $default  reduce using rule 33 (expr)


state 205

   38 expr: bool_prim IS NOT . BOOL
   41 bool_prim: bool_prim IS NOT . NUL

    NUL   shift, and go to state 236
    BOOL  shift, and go to state 237


state 206

   40 bool_prim: bool_prim IS NUL .

    $default  reduce using rule 40 (bool_prim)


state 207

   37 expr: bool_prim IS BOOL .

    $default  reduce using rule 37 (expr)


state 208

   44 bool_prim: bool_prim CMP ANY . '(' st1 ')'

    '('  shift, and go to state 238


state 209

   43 bool_prim: bool_prim CMP ALL . '(' st1 ')'

    '('  shift, and go to state 239


state 210

   42 bool_prim: bool_prim CMP pred .

    $default  reduce using rule 42 (bool_prim)


state 211

   47 pred: bit_expr NOT pred1 .

    $default  reduce using rule 47 (pred)


state 212

   49 pred1: IN '(' . st1 ')'
   50      | IN '(' . expr_lst ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    st1          go to state 240
    expr         go to state 241
    bool_prim    go to state 142
    pred         go to state 143
    expr_lst     go to state 242
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 213

   51 pred1: BETWEEN bit_expr . AND pred
   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    AND  shift, and go to state 243
    LS   shift, and go to state 179
    RS   shift, and go to state 180
    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '|'  shift, and go to state 183
    '&'  shift, and go to state 184
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188


state 214

   52 pred1: LIKE simple_expr .

    $default  reduce using rule 52 (pred1)


state 215

   53 pred1: REG bit_expr .
   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    LS   shift, and go to state 179
    RS   shift, and go to state 180
    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '|'  shift, and go to state 183
    '&'  shift, and go to state 184
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 53 (pred1)


state 216

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   58         | bit_expr LS bit_expr .
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 58 (bit_expr)


state 217

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   59         | bit_expr RS bit_expr .
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 59 (bit_expr)


state 218

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   63         | bit_expr DIV bit_expr .
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 188

    $default  reduce using rule 63 (bit_expr)


state 219

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   64         | bit_expr MOD bit_expr .
   65         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 188

    $default  reduce using rule 64 (bit_expr)


state 220

   56 bit_expr: bit_expr . '|' bit_expr
   56         | bit_expr '|' bit_expr .
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    LS   shift, and go to state 179
    RS   shift, and go to state 180
    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '&'  shift, and go to state 184
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 56 (bit_expr)


state 221

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   57         | bit_expr '&' bit_expr .
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    LS   shift, and go to state 179
    RS   shift, and go to state 180
    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '+'  shift, and go to state 185
    '-'  shift, and go to state 186
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 57 (bit_expr)


state 222

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   60         | bit_expr '+' bit_expr .
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 60 (bit_expr)


state 223

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   61         | bit_expr '-' bit_expr .
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 181
    MOD  shift, and go to state 182
    '*'  shift, and go to state 187
    '^'  shift, and go to state 188

    $default  reduce using rule 61 (bit_expr)


state 224

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   62         | bit_expr '*' bit_expr .
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 188

    $default  reduce using rule 62 (bit_expr)


state 225

   56 bit_expr: bit_expr . '|' bit_expr
   57         | bit_expr . '&' bit_expr
   58         | bit_expr . LS bit_expr
   59         | bit_expr . RS bit_expr
   60         | bit_expr . '+' bit_expr
   61         | bit_expr . '-' bit_expr
   62         | bit_expr . '*' bit_expr
   63         | bit_expr . DIV bit_expr
   64         | bit_expr . MOD bit_expr
   65         | bit_expr . '^' bit_expr
   65         | bit_expr '^' bit_expr .

    $default  reduce using rule 65 (bit_expr)


state 226

    9 st4: st4 ',' . st4

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    st4          go to state 244
    expr         go to state 191
    bool_prim    go to state 142
    pred         go to state 143
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 227

    7 st3: GROUP BY st4 st5 .

    $default  reduce using rule 7 (st3)


state 228

   16 st7: ASC .

    $default  reduce using rule 16 (st7)


state 229

   15 st7: DESC .

    $default  reduce using rule 15 (st7)


state 230

   10 st4: expr st7 .

    $default  reduce using rule 10 (st4)


state 231

   18 st8: st8 ',' . st8

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 12
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 16
    '-'      shift, and go to state 17
    '('      shift, and go to state 19
    '~'      shift, and go to state 20
    '!'      shift, and go to state 21

    st8           go to state 245
    val           go to state 24
    expr1         go to state 194
    bool_prim1    go to state 26
    pred2         go to state 27
    bit_expr1     go to state 28
    simple_expr1  go to state 29


state 232

   13 st6: ORDER BY st8 st9 .

    $default  reduce using rule 13 (st6)


state 233

   19 st8: expr1 st7 .

    $default  reduce using rule 19 (st8)


state 234

   21 st9: LIMIT INT ',' INT .

    $default  reduce using rule 21 (st9)


state 235

   72 simple_expr: EXISTS '(' st1 ')' .

    $default  reduce using rule 72 (simple_expr)


state 236

   41 bool_prim: bool_prim IS NOT NUL .

    $default  reduce using rule 41 (bool_prim)


state 237

   38 expr: bool_prim IS NOT BOOL .

    $default  reduce using rule 38 (expr)


state 238

   44 bool_prim: bool_prim CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 246


state 239

   43 bool_prim: bool_prim CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 247


state 240

   49 pred1: IN '(' st1 . ')'

    ')'  shift, and go to state 248


state 241

   32 expr: expr . OR expr
   33     | expr . XOR expr
   34     | expr . AND expr
   54 expr_lst: expr . ',' expr_lst
   55         | expr .

    OR   shift, and go to state 168
    AND  shift, and go to state 169
    XOR  shift, and go to state 170
    ','  shift, and go to state 249

    $default  reduce using rule 55 (expr_lst)


state 242

   50 pred1: IN '(' expr_lst . ')'

    ')'  shift, and go to state 250


state 243

   51 pred1: BETWEEN bit_expr AND . pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 161
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    pred         go to state 251
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 244

    9 st4: st4 . ',' st4
    9    | st4 ',' st4 .

    $default  reduce using rule 9 (st4)


state 245

   18 st8: st8 . ',' st8
   18    | st8 ',' st8 .

    $default  reduce using rule 18 (st8)


state 246

   44 bool_prim: bool_prim CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 252


state 247

   43 bool_prim: bool_prim CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 253


state 248

   49 pred1: IN '(' st1 ')' .

    $default  reduce using rule 49 (pred1)


state 249

   54 expr_lst: expr ',' . expr_lst

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 134
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 135
    BOOL     shift, and go to state 13
    INT      shift, and go to state 14
    FLOAT    shift, and go to state 15
    '+'      shift, and go to state 136
    '-'      shift, and go to state 137
    '('      shift, and go to state 138
    '~'      shift, and go to state 139
    '!'      shift, and go to state 140

    expr         go to state 241
    bool_prim    go to state 142
    pred         go to state 143
    expr_lst     go to state 254
    bit_expr     go to state 144
    simple_expr  go to state 145
    val          go to state 146


state 250

   50 pred1: IN '(' expr_lst ')' .

    $default  reduce using rule 50 (pred1)


state 251

   51 pred1: BETWEEN bit_expr AND pred .

    $default  reduce using rule 51 (pred1)


state 252

   44 bool_prim: bool_prim CMP ANY '(' st1 ')' .

    $default  reduce using rule 44 (bool_prim)


state 253

   43 bool_prim: bool_prim CMP ALL '(' st1 ')' .

    $default  reduce using rule 43 (bool_prim)


state 254

   54 expr_lst: expr ',' expr_lst .

    $default  reduce using rule 54 (expr_lst)
