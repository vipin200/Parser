Terminals unused in grammar

   LIMIT


Grammar

    0 $accept: start $end

    1 start: st1 ';'

    2 st1: SELECT attr FROM tableList st2
    3    | SELECT DISTINCT attr FROM tableList st2

    4 st2: WHERE expr st3
    5    | st3

    6 st3: GROUP BY st4 st5
    7    | st5

    8 st4: st4 ',' st4
    9    | ID st7
   10    | INT st7

   11 st5: HAVING expr1 st6
   12    | st6

   13 st6: ORDER BY st4
   14    | /* empty */

   15 st7: DESC
   16    | ASC
   17    | /* empty */

   18 attr: attrList
   19     | '*'
   20     | COUNT alias

   21 attrList: attrList ',' attrList
   22         | expr1 alias

   23 alias: AS ID
   24      | /* empty */

   25 tableList: tableList ',' tableList
   26          | ID
   27          | '(' st1 ')' alias

   28 expr: expr OR expr
   29     | expr XOR expr
   30     | expr AND expr
   31     | NOT expr
   32     | '(' expr ')'
   33     | bool_prim IS BOOL
   34     | bool_prim IS NOT BOOL
   35     | bool_prim

   36 bool_prim: bool_prim IS NUL
   37          | bool_prim IS NOT NUL
   38          | bool_prim CMP pred
   39          | bool_prim CMP ALL '(' st1 ')'
   40          | bool_prim CMP ANY '(' st1 ')'
   41          | pred

   42 pred: bit_expr pred1
   43     | bit_expr NOT pred1
   44     | bit_expr

   45 pred1: IN '(' st1 ')'
   46      | IN '(' expr_lst ')'
   47      | BETWEEN bit_expr AND pred
   48      | LIKE simple_expr
   49      | REG bit_expr

   50 expr_lst: expr ',' expr_lst
   51         | expr

   52 bit_expr: bit_expr '|' bit_expr
   53         | bit_expr '&' bit_expr
   54         | bit_expr LS bit_expr
   55         | bit_expr RS bit_expr
   56         | bit_expr '+' bit_expr
   57         | bit_expr '-' bit_expr
   58         | bit_expr '*' bit_expr
   59         | bit_expr DIV bit_expr
   60         | bit_expr MOD bit_expr
   61         | bit_expr '^' bit_expr
   62         | simple_expr

   63 simple_expr: '+' simple_expr
   64            | '-' simple_expr
   65            | '~' simple_expr
   66            | '!' simple_expr
   67            | '(' st1 ')'
   68            | EXISTS '(' st1 ')'
   69            | val

   70 val: FLOAT
   71    | NUL
   72    | LITERAL
   73    | BOOL
   74    | ID
   75    | INT

   76 expr1: expr1 OR expr1
   77      | expr1 XOR expr1
   78      | expr1 AND expr1
   79      | NOT expr1
   80      | '(' expr1 ')'
   81      | bool_prim1 IS BOOL
   82      | bool_prim1 IS NOT BOOL
   83      | bool_prim1

   84 bool_prim1: bool_prim1 IS NUL
   85           | bool_prim1 IS NOT NUL
   86           | bool_prim1 CMP pred2
   87           | bool_prim1 CMP ALL '(' st1 ')'
   88           | bool_prim1 CMP ANY '(' st1 ')'
   89           | pred2

   90 pred2: bit_expr1 pred3
   91      | bit_expr1 NOT pred3
   92      | bit_expr1

   93 pred3: IN '(' st1 ')'
   94      | IN '(' expr1_lst ')'
   95      | BETWEEN bit_expr1 AND pred2
   96      | LIKE simple_expr1
   97      | REG bit_expr1

   98 expr1_lst: expr1 ',' expr1_lst
   99          | expr1

  100 bit_expr1: bit_expr1 '|' bit_expr1
  101          | bit_expr1 '&' bit_expr1
  102          | bit_expr1 LS bit_expr1
  103          | bit_expr1 RS bit_expr1
  104          | bit_expr1 '+' bit_expr1
  105          | bit_expr1 '-' bit_expr1
  106          | bit_expr1 '*' bit_expr1
  107          | bit_expr1 DIV bit_expr1
  108          | bit_expr1 MOD bit_expr1
  109          | bit_expr1 '^' bit_expr1
  110          | simple_expr1

  111 simple_expr1: '+' simple_expr1
  112             | '-' simple_expr1
  113             | '~' simple_expr1
  114             | '!' simple_expr1
  115             | '(' st1 ')'
  116             | EXISTS '(' st1 ')'
  117             | FUNC '(' val ')'
  118             | FUNC '(' DISTINCT val ')'
  119             | val


Terminals, with rules where they appear

$end (0) 0
'!' (33) 66 114
'&' (38) 53 101
'(' (40) 27 32 39 40 45 46 67 68 80 87 88 93 94 115 116 117 118
')' (41) 27 32 39 40 45 46 67 68 80 87 88 93 94 115 116 117 118
'*' (42) 19 58 106
'+' (43) 56 63 104 111
',' (44) 8 21 25 50 98
'-' (45) 57 64 105 112
';' (59) 1
'^' (94) 61 109
'|' (124) 52 100
'~' (126) 65 113
error (256)
SELECT (258) 2 3
DISTINCT (259) 3 118
AS (260) 23
FUNC (261) 117 118
COUNT (262) 20
FROM (263) 2 3
WHERE (264) 4
GROUP (265) 6
HAVING (266) 11
ORDER (267) 13
BY (268) 6 13
LIMIT (269)
ASC (270) 16
DESC (271) 15
ID (272) 9 23 26 74
LITERAL (273) 72
OR (274) 28 76
AND (275) 30 47 78 95
XOR (276) 29 77
NOT (277) 31 34 37 43 79 82 85 91
IS (278) 33 34 36 37 81 82 84 85
NUL (279) 36 37 71 84 85
ANY (280) 40 88
ALL (281) 39 87
CMP (282) 38 39 40 86 87 88
IN (283) 45 46 93 94
BETWEEN (284) 47 95
LIKE (285) 48 96
REG (286) 49 97
LS (287) 54 102
RS (288) 55 103
DIV (289) 59 107
MOD (290) 60 108
EXISTS (291) 68 116
BOOL (292) 33 34 73 81 82
INT (293) 10 75
FLOAT (294) 70
UMINUS (295)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
start (54)
    on left: 1, on right: 0
st1 (55)
    on left: 2 3, on right: 1 27 39 40 45 67 68 87 88 93 115 116
st2 (56)
    on left: 4 5, on right: 2 3
st3 (57)
    on left: 6 7, on right: 4 5
st4 (58)
    on left: 8 9 10, on right: 6 8 13
st5 (59)
    on left: 11 12, on right: 6 7
st6 (60)
    on left: 13 14, on right: 11 12
st7 (61)
    on left: 15 16 17, on right: 9 10
attr (62)
    on left: 18 19 20, on right: 2 3
attrList (63)
    on left: 21 22, on right: 18 21
alias (64)
    on left: 23 24, on right: 20 22 27
tableList (65)
    on left: 25 26 27, on right: 2 3 25
expr (66)
    on left: 28 29 30 31 32 33 34 35, on right: 4 28 29 30 31 32 50
    51
bool_prim (67)
    on left: 36 37 38 39 40 41, on right: 33 34 35 36 37 38 39 40
pred (68)
    on left: 42 43 44, on right: 38 41 47
pred1 (69)
    on left: 45 46 47 48 49, on right: 42 43
expr_lst (70)
    on left: 50 51, on right: 46 50
bit_expr (71)
    on left: 52 53 54 55 56 57 58 59 60 61 62, on right: 42 43 44 47
    49 52 53 54 55 56 57 58 59 60 61
simple_expr (72)
    on left: 63 64 65 66 67 68 69, on right: 48 62 63 64 65 66
val (73)
    on left: 70 71 72 73 74 75, on right: 69 117 118 119
expr1 (74)
    on left: 76 77 78 79 80 81 82 83, on right: 11 22 76 77 78 79 80
    98 99
bool_prim1 (75)
    on left: 84 85 86 87 88 89, on right: 81 82 83 84 85 86 87 88
pred2 (76)
    on left: 90 91 92, on right: 86 89 95
pred3 (77)
    on left: 93 94 95 96 97, on right: 90 91
expr1_lst (78)
    on left: 98 99, on right: 94 98
bit_expr1 (79)
    on left: 100 101 102 103 104 105 106 107 108 109 110, on right:
    90 91 92 95 97 100 101 102 103 104 105 106 107 108 109
simple_expr1 (80)
    on left: 111 112 113 114 115 116 117 118 119, on right: 96 110
    111 112 113 114


state 0

    0 $accept: . start $end

    SELECT  shift, and go to state 1

    start  go to state 2
    st1    go to state 3


state 1

    2 st1: SELECT . attr FROM tableList st2
    3    | SELECT . DISTINCT attr FROM tableList st2

    DISTINCT  shift, and go to state 4
    FUNC      shift, and go to state 5
    COUNT     shift, and go to state 6
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NOT       shift, and go to state 9
    NUL       shift, and go to state 10
    EXISTS    shift, and go to state 11
    BOOL      shift, and go to state 12
    INT       shift, and go to state 13
    FLOAT     shift, and go to state 14
    '+'       shift, and go to state 15
    '-'       shift, and go to state 16
    '*'       shift, and go to state 17
    '('       shift, and go to state 18
    '~'       shift, and go to state 19
    '!'       shift, and go to state 20

    attr          go to state 21
    attrList      go to state 22
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 2

    0 $accept: start . $end

    $end  shift, and go to state 29


state 3

    1 start: st1 . ';'

    ';'  shift, and go to state 30


state 4

    3 st1: SELECT DISTINCT . attr FROM tableList st2

    FUNC     shift, and go to state 5
    COUNT    shift, and go to state 6
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '*'      shift, and go to state 17
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    attr          go to state 31
    attrList      go to state 22
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 5

  117 simple_expr1: FUNC . '(' val ')'
  118             | FUNC . '(' DISTINCT val ')'

    '('  shift, and go to state 32


state 6

   20 attr: COUNT . alias

    AS  shift, and go to state 33

    $default  reduce using rule 24 (alias)

    alias  go to state 34


state 7

   74 val: ID .

    $default  reduce using rule 74 (val)


state 8

   72 val: LITERAL .

    $default  reduce using rule 72 (val)


state 9

   79 expr1: NOT . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 35
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 10

   71 val: NUL .

    $default  reduce using rule 71 (val)


state 11

  116 simple_expr1: EXISTS . '(' st1 ')'

    '('  shift, and go to state 36


state 12

   73 val: BOOL .

    $default  reduce using rule 73 (val)


state 13

   75 val: INT .

    $default  reduce using rule 75 (val)


state 14

   70 val: FLOAT .

    $default  reduce using rule 70 (val)


state 15

  111 simple_expr1: '+' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 38


state 16

  112 simple_expr1: '-' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 39


state 17

   19 attr: '*' .

    $default  reduce using rule 19 (attr)


state 18

   80 expr1: '(' . expr1 ')'
  115 simple_expr1: '(' . st1 ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    st1           go to state 40
    val           go to state 23
    expr1         go to state 41
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 19

  113 simple_expr1: '~' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 42


state 20

  114 simple_expr1: '!' . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 43


state 21

    2 st1: SELECT attr . FROM tableList st2

    FROM  shift, and go to state 44


state 22

   18 attr: attrList .
   21 attrList: attrList . ',' attrList

    ','  shift, and go to state 45

    $default  reduce using rule 18 (attr)


state 23

  119 simple_expr1: val .

    $default  reduce using rule 119 (simple_expr1)


state 24

   22 attrList: expr1 . alias
   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1

    AS   shift, and go to state 33
    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48

    $default  reduce using rule 24 (alias)

    alias  go to state 49


state 25

   81 expr1: bool_prim1 . IS BOOL
   82      | bool_prim1 . IS NOT BOOL
   83      | bool_prim1 .
   84 bool_prim1: bool_prim1 . IS NUL
   85           | bool_prim1 . IS NOT NUL
   86           | bool_prim1 . CMP pred2
   87           | bool_prim1 . CMP ALL '(' st1 ')'
   88           | bool_prim1 . CMP ANY '(' st1 ')'

    IS   shift, and go to state 50
    CMP  shift, and go to state 51

    $default  reduce using rule 83 (expr1)


state 26

   89 bool_prim1: pred2 .

    $default  reduce using rule 89 (bool_prim1)


state 27

   90 pred2: bit_expr1 . pred3
   91      | bit_expr1 . NOT pred3
   92      | bit_expr1 .
  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    NOT      shift, and go to state 52
    IN       shift, and go to state 53
    BETWEEN  shift, and go to state 54
    LIKE     shift, and go to state 55
    REG      shift, and go to state 56
    LS       shift, and go to state 57
    RS       shift, and go to state 58
    DIV      shift, and go to state 59
    MOD      shift, and go to state 60
    '|'      shift, and go to state 61
    '&'      shift, and go to state 62
    '+'      shift, and go to state 63
    '-'      shift, and go to state 64
    '*'      shift, and go to state 65
    '^'      shift, and go to state 66

    $default  reduce using rule 92 (pred2)

    pred3  go to state 67


state 28

  110 bit_expr1: simple_expr1 .

    $default  reduce using rule 110 (bit_expr1)


state 29

    0 $accept: start $end .

    $default  accept


state 30

    1 start: st1 ';' .

    $default  reduce using rule 1 (start)


state 31

    3 st1: SELECT DISTINCT attr . FROM tableList st2

    FROM  shift, and go to state 68


state 32

  117 simple_expr1: FUNC '(' . val ')'
  118             | FUNC '(' . DISTINCT val ')'

    DISTINCT  shift, and go to state 69
    ID        shift, and go to state 7
    LITERAL   shift, and go to state 8
    NUL       shift, and go to state 10
    BOOL      shift, and go to state 12
    INT       shift, and go to state 13
    FLOAT     shift, and go to state 14

    val  go to state 70


state 33

   23 alias: AS . ID

    ID  shift, and go to state 71


state 34

   20 attr: COUNT alias .

    $default  reduce using rule 20 (attr)


state 35

   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1
   79      | NOT expr1 .

    $default  reduce using rule 79 (expr1)


state 36

  116 simple_expr1: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 72


state 37

  115 simple_expr1: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 40


state 38

  111 simple_expr1: '+' simple_expr1 .

    $default  reduce using rule 111 (simple_expr1)


state 39

  112 simple_expr1: '-' simple_expr1 .

    $default  reduce using rule 112 (simple_expr1)


state 40

  115 simple_expr1: '(' st1 . ')'

    ')'  shift, and go to state 73


state 41

   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1
   80      | '(' expr1 . ')'

    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48
    ')'  shift, and go to state 74


state 42

  113 simple_expr1: '~' simple_expr1 .

    $default  reduce using rule 113 (simple_expr1)


state 43

  114 simple_expr1: '!' simple_expr1 .

    $default  reduce using rule 114 (simple_expr1)


state 44

    2 st1: SELECT attr FROM . tableList st2

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 77


state 45

   21 attrList: attrList ',' . attrList

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    attrList      go to state 78
    val           go to state 23
    expr1         go to state 24
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 46

   76 expr1: expr1 OR . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 79
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 47

   78 expr1: expr1 AND . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 80
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 48

   77 expr1: expr1 XOR . expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 81
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 49

   22 attrList: expr1 alias .

    $default  reduce using rule 22 (attrList)


state 50

   81 expr1: bool_prim1 IS . BOOL
   82      | bool_prim1 IS . NOT BOOL
   84 bool_prim1: bool_prim1 IS . NUL
   85           | bool_prim1 IS . NOT NUL

    NOT   shift, and go to state 82
    NUL   shift, and go to state 83
    BOOL  shift, and go to state 84


state 51

   86 bool_prim1: bool_prim1 CMP . pred2
   87           | bool_prim1 CMP . ALL '(' st1 ')'
   88           | bool_prim1 CMP . ANY '(' st1 ')'

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 85
    ALL      shift, and go to state 86
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    pred2         go to state 87
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 52

   91 pred2: bit_expr1 NOT . pred3

    IN       shift, and go to state 53
    BETWEEN  shift, and go to state 54
    LIKE     shift, and go to state 55
    REG      shift, and go to state 56

    pred3  go to state 88


state 53

   93 pred3: IN . '(' st1 ')'
   94      | IN . '(' expr1_lst ')'

    '('  shift, and go to state 89


state 54

   95 pred3: BETWEEN . bit_expr1 AND pred2

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 90
    simple_expr1  go to state 28


state 55

   96 pred3: LIKE . simple_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    simple_expr1  go to state 91


state 56

   97 pred3: REG . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 92
    simple_expr1  go to state 28


state 57

  102 bit_expr1: bit_expr1 LS . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 93
    simple_expr1  go to state 28


state 58

  103 bit_expr1: bit_expr1 RS . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 94
    simple_expr1  go to state 28


state 59

  107 bit_expr1: bit_expr1 DIV . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 95
    simple_expr1  go to state 28


state 60

  108 bit_expr1: bit_expr1 MOD . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 96
    simple_expr1  go to state 28


state 61

  100 bit_expr1: bit_expr1 '|' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 97
    simple_expr1  go to state 28


state 62

  101 bit_expr1: bit_expr1 '&' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 98
    simple_expr1  go to state 28


state 63

  104 bit_expr1: bit_expr1 '+' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 99
    simple_expr1  go to state 28


state 64

  105 bit_expr1: bit_expr1 '-' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 100
    simple_expr1  go to state 28


state 65

  106 bit_expr1: bit_expr1 '*' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 101
    simple_expr1  go to state 28


state 66

  109 bit_expr1: bit_expr1 '^' . bit_expr1

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    bit_expr1     go to state 102
    simple_expr1  go to state 28


state 67

   90 pred2: bit_expr1 pred3 .

    $default  reduce using rule 90 (pred2)


state 68

    3 st1: SELECT DISTINCT attr FROM . tableList st2

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 103


state 69

  118 simple_expr1: FUNC '(' DISTINCT . val ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14

    val  go to state 104


state 70

  117 simple_expr1: FUNC '(' val . ')'

    ')'  shift, and go to state 105


state 71

   23 alias: AS ID .

    $default  reduce using rule 23 (alias)


state 72

  116 simple_expr1: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 106


state 73

  115 simple_expr1: '(' st1 ')' .

    $default  reduce using rule 115 (simple_expr1)


state 74

   80 expr1: '(' expr1 ')' .

    $default  reduce using rule 80 (expr1)


state 75

   26 tableList: ID .

    $default  reduce using rule 26 (tableList)


state 76

   27 tableList: '(' . st1 ')' alias

    SELECT  shift, and go to state 1

    st1  go to state 107


state 77

    2 st1: SELECT attr FROM tableList . st2
   25 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 108
    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    ','     shift, and go to state 112

    $default  reduce using rule 14 (st6)

    st2  go to state 113
    st3  go to state 114
    st5  go to state 115
    st6  go to state 116


state 78

   21 attrList: attrList . ',' attrList
   21         | attrList ',' attrList .

    $default  reduce using rule 21 (attrList)


state 79

   76 expr1: expr1 . OR expr1
   76      | expr1 OR expr1 .
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1

    AND  shift, and go to state 47
    XOR  shift, and go to state 48

    $default  reduce using rule 76 (expr1)


state 80

   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1
   78      | expr1 AND expr1 .

    $default  reduce using rule 78 (expr1)


state 81

   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   77      | expr1 XOR expr1 .
   78      | expr1 . AND expr1

    AND  shift, and go to state 47

    $default  reduce using rule 77 (expr1)


state 82

   82 expr1: bool_prim1 IS NOT . BOOL
   85 bool_prim1: bool_prim1 IS NOT . NUL

    NUL   shift, and go to state 117
    BOOL  shift, and go to state 118


state 83

   84 bool_prim1: bool_prim1 IS NUL .

    $default  reduce using rule 84 (bool_prim1)


state 84

   81 expr1: bool_prim1 IS BOOL .

    $default  reduce using rule 81 (expr1)


state 85

   88 bool_prim1: bool_prim1 CMP ANY . '(' st1 ')'

    '('  shift, and go to state 119


state 86

   87 bool_prim1: bool_prim1 CMP ALL . '(' st1 ')'

    '('  shift, and go to state 120


state 87

   86 bool_prim1: bool_prim1 CMP pred2 .

    $default  reduce using rule 86 (bool_prim1)


state 88

   91 pred2: bit_expr1 NOT pred3 .

    $default  reduce using rule 91 (pred2)


state 89

   93 pred3: IN '(' . st1 ')'
   94      | IN '(' . expr1_lst ')'

    SELECT   shift, and go to state 1
    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    st1           go to state 121
    val           go to state 23
    expr1         go to state 122
    bool_prim1    go to state 25
    pred2         go to state 26
    expr1_lst     go to state 123
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 90

   95 pred3: BETWEEN bit_expr1 . AND pred2
  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    AND  shift, and go to state 124
    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '|'  shift, and go to state 61
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66


state 91

   96 pred3: LIKE simple_expr1 .

    $default  reduce using rule 96 (pred3)


state 92

   97 pred3: REG bit_expr1 .
  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '|'  shift, and go to state 61
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 97 (pred3)


state 93

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  102          | bit_expr1 LS bit_expr1 .
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 102 (bit_expr1)


state 94

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  103          | bit_expr1 RS bit_expr1 .
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 103 (bit_expr1)


state 95

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  107          | bit_expr1 DIV bit_expr1 .
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 107 (bit_expr1)


state 96

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  108          | bit_expr1 MOD bit_expr1 .
  109          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 108 (bit_expr1)


state 97

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  100          | bit_expr1 '|' bit_expr1 .
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '&'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 100 (bit_expr1)


state 98

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  101          | bit_expr1 '&' bit_expr1 .
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    LS   shift, and go to state 57
    RS   shift, and go to state 58
    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 101 (bit_expr1)


state 99

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  104          | bit_expr1 '+' bit_expr1 .
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 104 (bit_expr1)


state 100

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  105          | bit_expr1 '-' bit_expr1 .
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    DIV  shift, and go to state 59
    MOD  shift, and go to state 60
    '*'  shift, and go to state 65
    '^'  shift, and go to state 66

    $default  reduce using rule 105 (bit_expr1)


state 101

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  106          | bit_expr1 '*' bit_expr1 .
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1

    '^'  shift, and go to state 66

    $default  reduce using rule 106 (bit_expr1)


state 102

  100 bit_expr1: bit_expr1 . '|' bit_expr1
  101          | bit_expr1 . '&' bit_expr1
  102          | bit_expr1 . LS bit_expr1
  103          | bit_expr1 . RS bit_expr1
  104          | bit_expr1 . '+' bit_expr1
  105          | bit_expr1 . '-' bit_expr1
  106          | bit_expr1 . '*' bit_expr1
  107          | bit_expr1 . DIV bit_expr1
  108          | bit_expr1 . MOD bit_expr1
  109          | bit_expr1 . '^' bit_expr1
  109          | bit_expr1 '^' bit_expr1 .

    $default  reduce using rule 109 (bit_expr1)


state 103

    3 st1: SELECT DISTINCT attr FROM tableList . st2
   25 tableList: tableList . ',' tableList

    WHERE   shift, and go to state 108
    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    ','     shift, and go to state 112

    $default  reduce using rule 14 (st6)

    st2  go to state 125
    st3  go to state 114
    st5  go to state 115
    st6  go to state 116


state 104

  118 simple_expr1: FUNC '(' DISTINCT val . ')'

    ')'  shift, and go to state 126


state 105

  117 simple_expr1: FUNC '(' val ')' .

    $default  reduce using rule 117 (simple_expr1)


state 106

  116 simple_expr1: EXISTS '(' st1 ')' .

    $default  reduce using rule 116 (simple_expr1)


state 107

   27 tableList: '(' st1 . ')' alias

    ')'  shift, and go to state 127


state 108

    4 st2: WHERE . expr st3

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 135
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 109

    6 st3: GROUP . BY st4 st5

    BY  shift, and go to state 141


state 110

   11 st5: HAVING . expr1 st6

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 142
    bool_prim1    go to state 25
    pred2         go to state 26
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 111

   13 st6: ORDER . BY st4

    BY  shift, and go to state 143


state 112

   25 tableList: tableList ',' . tableList

    ID   shift, and go to state 75
    '('  shift, and go to state 76

    tableList  go to state 144


state 113

    2 st1: SELECT attr FROM tableList st2 .

    $default  reduce using rule 2 (st1)


state 114

    5 st2: st3 .

    $default  reduce using rule 5 (st2)


state 115

    7 st3: st5 .

    $default  reduce using rule 7 (st3)


state 116

   12 st5: st6 .

    $default  reduce using rule 12 (st5)


state 117

   85 bool_prim1: bool_prim1 IS NOT NUL .

    $default  reduce using rule 85 (bool_prim1)


state 118

   82 expr1: bool_prim1 IS NOT BOOL .

    $default  reduce using rule 82 (expr1)


state 119

   88 bool_prim1: bool_prim1 CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 145


state 120

   87 bool_prim1: bool_prim1 CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 146


state 121

   93 pred3: IN '(' st1 . ')'

    ')'  shift, and go to state 147


state 122

   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1
   98 expr1_lst: expr1 . ',' expr1_lst
   99          | expr1 .

    OR   shift, and go to state 46
    AND  shift, and go to state 47
    XOR  shift, and go to state 48
    ','  shift, and go to state 148

    $default  reduce using rule 99 (expr1_lst)


state 123

   94 pred3: IN '(' expr1_lst . ')'

    ')'  shift, and go to state 149


state 124

   95 pred3: BETWEEN bit_expr1 AND . pred2

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 37
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    pred2         go to state 150
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 125

    3 st1: SELECT DISTINCT attr FROM tableList st2 .

    $default  reduce using rule 3 (st1)


state 126

  118 simple_expr1: FUNC '(' DISTINCT val ')' .

    $default  reduce using rule 118 (simple_expr1)


state 127

   27 tableList: '(' st1 ')' . alias

    AS  shift, and go to state 33

    $default  reduce using rule 24 (alias)

    alias  go to state 151


state 128

   31 expr: NOT . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 152
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 129

   68 simple_expr: EXISTS . '(' st1 ')'

    '('  shift, and go to state 153


state 130

   63 simple_expr: '+' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    simple_expr  go to state 155
    val          go to state 140


state 131

   64 simple_expr: '-' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    simple_expr  go to state 156
    val          go to state 140


state 132

   32 expr: '(' . expr ')'
   67 simple_expr: '(' . st1 ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    st1          go to state 157
    expr         go to state 158
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 133

   65 simple_expr: '~' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    simple_expr  go to state 159
    val          go to state 140


state 134

   66 simple_expr: '!' . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    simple_expr  go to state 160
    val          go to state 140


state 135

    4 st2: WHERE expr . st3
   28 expr: expr . OR expr
   29     | expr . XOR expr
   30     | expr . AND expr

    GROUP   shift, and go to state 109
    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    OR      shift, and go to state 161
    AND     shift, and go to state 162
    XOR     shift, and go to state 163

    $default  reduce using rule 14 (st6)

    st3  go to state 164
    st5  go to state 115
    st6  go to state 116


state 136

   33 expr: bool_prim . IS BOOL
   34     | bool_prim . IS NOT BOOL
   35     | bool_prim .
   36 bool_prim: bool_prim . IS NUL
   37          | bool_prim . IS NOT NUL
   38          | bool_prim . CMP pred
   39          | bool_prim . CMP ALL '(' st1 ')'
   40          | bool_prim . CMP ANY '(' st1 ')'

    IS   shift, and go to state 165
    CMP  shift, and go to state 166

    $default  reduce using rule 35 (expr)


state 137

   41 bool_prim: pred .

    $default  reduce using rule 41 (bool_prim)


state 138

   42 pred: bit_expr . pred1
   43     | bit_expr . NOT pred1
   44     | bit_expr .
   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    NOT      shift, and go to state 167
    IN       shift, and go to state 168
    BETWEEN  shift, and go to state 169
    LIKE     shift, and go to state 170
    REG      shift, and go to state 171
    LS       shift, and go to state 172
    RS       shift, and go to state 173
    DIV      shift, and go to state 174
    MOD      shift, and go to state 175
    '|'      shift, and go to state 176
    '&'      shift, and go to state 177
    '+'      shift, and go to state 178
    '-'      shift, and go to state 179
    '*'      shift, and go to state 180
    '^'      shift, and go to state 181

    $default  reduce using rule 44 (pred)

    pred1  go to state 182


state 139

   62 bit_expr: simple_expr .

    $default  reduce using rule 62 (bit_expr)


state 140

   69 simple_expr: val .

    $default  reduce using rule 69 (simple_expr)


state 141

    6 st3: GROUP BY . st4 st5

    ID   shift, and go to state 183
    INT  shift, and go to state 184

    st4  go to state 185


state 142

   11 st5: HAVING expr1 . st6
   76 expr1: expr1 . OR expr1
   77      | expr1 . XOR expr1
   78      | expr1 . AND expr1

    ORDER  shift, and go to state 111
    OR     shift, and go to state 46
    AND    shift, and go to state 47
    XOR    shift, and go to state 48

    $default  reduce using rule 14 (st6)

    st6  go to state 186


state 143

   13 st6: ORDER BY . st4

    ID   shift, and go to state 183
    INT  shift, and go to state 184

    st4  go to state 187


state 144

   25 tableList: tableList . ',' tableList
   25          | tableList ',' tableList .

    $default  reduce using rule 25 (tableList)


state 145

   88 bool_prim1: bool_prim1 CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 188


state 146

   87 bool_prim1: bool_prim1 CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 189


state 147

   93 pred3: IN '(' st1 ')' .

    $default  reduce using rule 93 (pred3)


state 148

   98 expr1_lst: expr1 ',' . expr1_lst

    FUNC     shift, and go to state 5
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 9
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 11
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 15
    '-'      shift, and go to state 16
    '('      shift, and go to state 18
    '~'      shift, and go to state 19
    '!'      shift, and go to state 20

    val           go to state 23
    expr1         go to state 122
    bool_prim1    go to state 25
    pred2         go to state 26
    expr1_lst     go to state 190
    bit_expr1     go to state 27
    simple_expr1  go to state 28


state 149

   94 pred3: IN '(' expr1_lst ')' .

    $default  reduce using rule 94 (pred3)


state 150

   95 pred3: BETWEEN bit_expr1 AND pred2 .

    $default  reduce using rule 95 (pred3)


state 151

   27 tableList: '(' st1 ')' alias .

    $default  reduce using rule 27 (tableList)


state 152

   28 expr: expr . OR expr
   29     | expr . XOR expr
   30     | expr . AND expr
   31     | NOT expr .

    $default  reduce using rule 31 (expr)


state 153

   68 simple_expr: EXISTS '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 191


state 154

   67 simple_expr: '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 157


state 155

   63 simple_expr: '+' simple_expr .

    $default  reduce using rule 63 (simple_expr)


state 156

   64 simple_expr: '-' simple_expr .

    $default  reduce using rule 64 (simple_expr)


state 157

   67 simple_expr: '(' st1 . ')'

    ')'  shift, and go to state 192


state 158

   28 expr: expr . OR expr
   29     | expr . XOR expr
   30     | expr . AND expr
   32     | '(' expr . ')'

    OR   shift, and go to state 161
    AND  shift, and go to state 162
    XOR  shift, and go to state 163
    ')'  shift, and go to state 193


state 159

   65 simple_expr: '~' simple_expr .

    $default  reduce using rule 65 (simple_expr)


state 160

   66 simple_expr: '!' simple_expr .

    $default  reduce using rule 66 (simple_expr)


state 161

   28 expr: expr OR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 194
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 162

   30 expr: expr AND . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 195
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 163

   29 expr: expr XOR . expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 196
    bool_prim    go to state 136
    pred         go to state 137
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 164

    4 st2: WHERE expr st3 .

    $default  reduce using rule 4 (st2)


state 165

   33 expr: bool_prim IS . BOOL
   34     | bool_prim IS . NOT BOOL
   36 bool_prim: bool_prim IS . NUL
   37          | bool_prim IS . NOT NUL

    NOT   shift, and go to state 197
    NUL   shift, and go to state 198
    BOOL  shift, and go to state 199


state 166

   38 bool_prim: bool_prim CMP . pred
   39          | bool_prim CMP . ALL '(' st1 ')'
   40          | bool_prim CMP . ANY '(' st1 ')'

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    ANY      shift, and go to state 200
    ALL      shift, and go to state 201
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    pred         go to state 202
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 167

   43 pred: bit_expr NOT . pred1

    IN       shift, and go to state 168
    BETWEEN  shift, and go to state 169
    LIKE     shift, and go to state 170
    REG      shift, and go to state 171

    pred1  go to state 203


state 168

   45 pred1: IN . '(' st1 ')'
   46      | IN . '(' expr_lst ')'

    '('  shift, and go to state 204


state 169

   47 pred1: BETWEEN . bit_expr AND pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 205
    simple_expr  go to state 139
    val          go to state 140


state 170

   48 pred1: LIKE . simple_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    simple_expr  go to state 206
    val          go to state 140


state 171

   49 pred1: REG . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 207
    simple_expr  go to state 139
    val          go to state 140


state 172

   54 bit_expr: bit_expr LS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 208
    simple_expr  go to state 139
    val          go to state 140


state 173

   55 bit_expr: bit_expr RS . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 209
    simple_expr  go to state 139
    val          go to state 140


state 174

   59 bit_expr: bit_expr DIV . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 210
    simple_expr  go to state 139
    val          go to state 140


state 175

   60 bit_expr: bit_expr MOD . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 211
    simple_expr  go to state 139
    val          go to state 140


state 176

   52 bit_expr: bit_expr '|' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 212
    simple_expr  go to state 139
    val          go to state 140


state 177

   53 bit_expr: bit_expr '&' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 213
    simple_expr  go to state 139
    val          go to state 140


state 178

   56 bit_expr: bit_expr '+' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 214
    simple_expr  go to state 139
    val          go to state 140


state 179

   57 bit_expr: bit_expr '-' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 215
    simple_expr  go to state 139
    val          go to state 140


state 180

   58 bit_expr: bit_expr '*' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 216
    simple_expr  go to state 139
    val          go to state 140


state 181

   61 bit_expr: bit_expr '^' . bit_expr

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    bit_expr     go to state 217
    simple_expr  go to state 139
    val          go to state 140


state 182

   42 pred: bit_expr pred1 .

    $default  reduce using rule 42 (pred)


state 183

    9 st4: ID . st7

    ASC   shift, and go to state 218
    DESC  shift, and go to state 219

    $default  reduce using rule 17 (st7)

    st7  go to state 220


state 184

   10 st4: INT . st7

    ASC   shift, and go to state 218
    DESC  shift, and go to state 219

    $default  reduce using rule 17 (st7)

    st7  go to state 221


state 185

    6 st3: GROUP BY st4 . st5
    8 st4: st4 . ',' st4

    HAVING  shift, and go to state 110
    ORDER   shift, and go to state 111
    ','     shift, and go to state 222

    $default  reduce using rule 14 (st6)

    st5  go to state 223
    st6  go to state 116


state 186

   11 st5: HAVING expr1 st6 .

    $default  reduce using rule 11 (st5)


state 187

    8 st4: st4 . ',' st4
   13 st6: ORDER BY st4 .

    ','  shift, and go to state 222

    $default  reduce using rule 13 (st6)


state 188

   88 bool_prim1: bool_prim1 CMP ANY '(' st1 ')' .

    $default  reduce using rule 88 (bool_prim1)


state 189

   87 bool_prim1: bool_prim1 CMP ALL '(' st1 ')' .

    $default  reduce using rule 87 (bool_prim1)


state 190

   98 expr1_lst: expr1 ',' expr1_lst .

    $default  reduce using rule 98 (expr1_lst)


state 191

   68 simple_expr: EXISTS '(' st1 . ')'

    ')'  shift, and go to state 224


state 192

   67 simple_expr: '(' st1 ')' .

    $default  reduce using rule 67 (simple_expr)


state 193

   32 expr: '(' expr ')' .

    $default  reduce using rule 32 (expr)


state 194

   28 expr: expr . OR expr
   28     | expr OR expr .
   29     | expr . XOR expr
   30     | expr . AND expr

    AND  shift, and go to state 162
    XOR  shift, and go to state 163

    $default  reduce using rule 28 (expr)


state 195

   28 expr: expr . OR expr
   29     | expr . XOR expr
   30     | expr . AND expr
   30     | expr AND expr .

    $default  reduce using rule 30 (expr)


state 196

   28 expr: expr . OR expr
   29     | expr . XOR expr
   29     | expr XOR expr .
   30     | expr . AND expr

    AND  shift, and go to state 162

    $default  reduce using rule 29 (expr)


state 197

   34 expr: bool_prim IS NOT . BOOL
   37 bool_prim: bool_prim IS NOT . NUL

    NUL   shift, and go to state 225
    BOOL  shift, and go to state 226


state 198

   36 bool_prim: bool_prim IS NUL .

    $default  reduce using rule 36 (bool_prim)


state 199

   33 expr: bool_prim IS BOOL .

    $default  reduce using rule 33 (expr)


state 200

   40 bool_prim: bool_prim CMP ANY . '(' st1 ')'

    '('  shift, and go to state 227


state 201

   39 bool_prim: bool_prim CMP ALL . '(' st1 ')'

    '('  shift, and go to state 228


state 202

   38 bool_prim: bool_prim CMP pred .

    $default  reduce using rule 38 (bool_prim)


state 203

   43 pred: bit_expr NOT pred1 .

    $default  reduce using rule 43 (pred)


state 204

   45 pred1: IN '(' . st1 ')'
   46      | IN '(' . expr_lst ')'

    SELECT   shift, and go to state 1
    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    st1          go to state 229
    expr         go to state 230
    bool_prim    go to state 136
    pred         go to state 137
    expr_lst     go to state 231
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 205

   47 pred1: BETWEEN bit_expr . AND pred
   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    AND  shift, and go to state 232
    LS   shift, and go to state 172
    RS   shift, and go to state 173
    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '|'  shift, and go to state 176
    '&'  shift, and go to state 177
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181


state 206

   48 pred1: LIKE simple_expr .

    $default  reduce using rule 48 (pred1)


state 207

   49 pred1: REG bit_expr .
   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    LS   shift, and go to state 172
    RS   shift, and go to state 173
    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '|'  shift, and go to state 176
    '&'  shift, and go to state 177
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 49 (pred1)


state 208

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   54         | bit_expr LS bit_expr .
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 54 (bit_expr)


state 209

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   55         | bit_expr RS bit_expr .
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 55 (bit_expr)


state 210

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   59         | bit_expr DIV bit_expr .
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 181

    $default  reduce using rule 59 (bit_expr)


state 211

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   60         | bit_expr MOD bit_expr .
   61         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 181

    $default  reduce using rule 60 (bit_expr)


state 212

   52 bit_expr: bit_expr . '|' bit_expr
   52         | bit_expr '|' bit_expr .
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    LS   shift, and go to state 172
    RS   shift, and go to state 173
    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '&'  shift, and go to state 177
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 52 (bit_expr)


state 213

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   53         | bit_expr '&' bit_expr .
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    LS   shift, and go to state 172
    RS   shift, and go to state 173
    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '+'  shift, and go to state 178
    '-'  shift, and go to state 179
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 53 (bit_expr)


state 214

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   56         | bit_expr '+' bit_expr .
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 56 (bit_expr)


state 215

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   57         | bit_expr '-' bit_expr .
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    DIV  shift, and go to state 174
    MOD  shift, and go to state 175
    '*'  shift, and go to state 180
    '^'  shift, and go to state 181

    $default  reduce using rule 57 (bit_expr)


state 216

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   58         | bit_expr '*' bit_expr .
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr

    '^'  shift, and go to state 181

    $default  reduce using rule 58 (bit_expr)


state 217

   52 bit_expr: bit_expr . '|' bit_expr
   53         | bit_expr . '&' bit_expr
   54         | bit_expr . LS bit_expr
   55         | bit_expr . RS bit_expr
   56         | bit_expr . '+' bit_expr
   57         | bit_expr . '-' bit_expr
   58         | bit_expr . '*' bit_expr
   59         | bit_expr . DIV bit_expr
   60         | bit_expr . MOD bit_expr
   61         | bit_expr . '^' bit_expr
   61         | bit_expr '^' bit_expr .

    $default  reduce using rule 61 (bit_expr)


state 218

   16 st7: ASC .

    $default  reduce using rule 16 (st7)


state 219

   15 st7: DESC .

    $default  reduce using rule 15 (st7)


state 220

    9 st4: ID st7 .

    $default  reduce using rule 9 (st4)


state 221

   10 st4: INT st7 .

    $default  reduce using rule 10 (st4)


state 222

    8 st4: st4 ',' . st4

    ID   shift, and go to state 183
    INT  shift, and go to state 184

    st4  go to state 233


state 223

    6 st3: GROUP BY st4 st5 .

    $default  reduce using rule 6 (st3)


state 224

   68 simple_expr: EXISTS '(' st1 ')' .

    $default  reduce using rule 68 (simple_expr)


state 225

   37 bool_prim: bool_prim IS NOT NUL .

    $default  reduce using rule 37 (bool_prim)


state 226

   34 expr: bool_prim IS NOT BOOL .

    $default  reduce using rule 34 (expr)


state 227

   40 bool_prim: bool_prim CMP ANY '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 234


state 228

   39 bool_prim: bool_prim CMP ALL '(' . st1 ')'

    SELECT  shift, and go to state 1

    st1  go to state 235


state 229

   45 pred1: IN '(' st1 . ')'

    ')'  shift, and go to state 236


state 230

   28 expr: expr . OR expr
   29     | expr . XOR expr
   30     | expr . AND expr
   50 expr_lst: expr . ',' expr_lst
   51         | expr .

    OR   shift, and go to state 161
    AND  shift, and go to state 162
    XOR  shift, and go to state 163
    ','  shift, and go to state 237

    $default  reduce using rule 51 (expr_lst)


state 231

   46 pred1: IN '(' expr_lst . ')'

    ')'  shift, and go to state 238


state 232

   47 pred1: BETWEEN bit_expr AND . pred

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 154
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    pred         go to state 239
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 233

    8 st4: st4 . ',' st4
    8    | st4 ',' st4 .

    $default  reduce using rule 8 (st4)


state 234

   40 bool_prim: bool_prim CMP ANY '(' st1 . ')'

    ')'  shift, and go to state 240


state 235

   39 bool_prim: bool_prim CMP ALL '(' st1 . ')'

    ')'  shift, and go to state 241


state 236

   45 pred1: IN '(' st1 ')' .

    $default  reduce using rule 45 (pred1)


state 237

   50 expr_lst: expr ',' . expr_lst

    ID       shift, and go to state 7
    LITERAL  shift, and go to state 8
    NOT      shift, and go to state 128
    NUL      shift, and go to state 10
    EXISTS   shift, and go to state 129
    BOOL     shift, and go to state 12
    INT      shift, and go to state 13
    FLOAT    shift, and go to state 14
    '+'      shift, and go to state 130
    '-'      shift, and go to state 131
    '('      shift, and go to state 132
    '~'      shift, and go to state 133
    '!'      shift, and go to state 134

    expr         go to state 230
    bool_prim    go to state 136
    pred         go to state 137
    expr_lst     go to state 242
    bit_expr     go to state 138
    simple_expr  go to state 139
    val          go to state 140


state 238

   46 pred1: IN '(' expr_lst ')' .

    $default  reduce using rule 46 (pred1)


state 239

   47 pred1: BETWEEN bit_expr AND pred .

    $default  reduce using rule 47 (pred1)


state 240

   40 bool_prim: bool_prim CMP ANY '(' st1 ')' .

    $default  reduce using rule 40 (bool_prim)


state 241

   39 bool_prim: bool_prim CMP ALL '(' st1 ')' .

    $default  reduce using rule 39 (bool_prim)


state 242

   50 expr_lst: expr ',' expr_lst .

    $default  reduce using rule 50 (expr_lst)
